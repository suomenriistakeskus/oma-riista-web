
package fi.riista.integration.luke_import.model.v1_0;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;


/**
 * <p>Java class for _HirvitietokorttiType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="_HirvitietokorttiType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="_Sivu_1" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Sivu_1Type"/&gt;
 *         &lt;element name="_Sivu_2" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Sivu_2Type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="_Sivu_3" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Sivu_3Type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="_Sivu_4" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Sivu_4Type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="_Sivu_5" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Sivu_5Type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="_Sivu_6" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Sivu_6Type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="_Sivu_7" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Sivu_7Type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="_Sivu_8" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Sivu_8Type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="_PAGE_IMAGES" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}ImageType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;anyAttribute namespace='http://www.abbyy.com/FlexiCapture/Schemas/Export/AdditionalFormData.xsd'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "_HirvitietokorttiType", namespace = "http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd", propOrder = {
    "page1",
    "page2",
    "page3",
    "page4",
    "page5",
    "page6",
    "page7",
    "page8",
    "imagePage"
})
public class MooseDataCard implements Cloneable, Copyable, PartialCopyable, ToString2
{

    @XmlElement(name = "_Sivu_1", required = true)
    protected MooseDataCardPage1 page1;
    @XmlElement(name = "_Sivu_2")
    protected List<MooseDataCardPage2> page2;
    @XmlElement(name = "_Sivu_3")
    protected List<MooseDataCardPage3> page3;
    @XmlElement(name = "_Sivu_4")
    protected List<MooseDataCardPage4> page4;
    @XmlElement(name = "_Sivu_5")
    protected List<MooseDataCardPage5> page5;
    @XmlElement(name = "_Sivu_6")
    protected List<MooseDataCardPage6> page6;
    @XmlElement(name = "_Sivu_7")
    protected List<MooseDataCardPage7> page7;
    @XmlElement(name = "_Sivu_8")
    protected List<MooseDataCardPage8> page8;
    @XmlElement(name = "_PAGE_IMAGES")
    protected ImageType imagePage;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public MooseDataCard() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a MooseDataCard copying the state of another MooseDataCard
     * 
     * @param _other
     *     The original MooseDataCard from which to copy state.
     */
    public MooseDataCard(final MooseDataCard _other) {
        this.page1 = ((_other.page1 == null)?null:_other.page1 .createCopy());
        if (_other.page2 == null) {
            this.page2 = null;
        } else {
            this.page2 = new ArrayList<MooseDataCardPage2>();
            for (MooseDataCardPage2 _item: _other.page2) {
                this.page2 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (_other.page3 == null) {
            this.page3 = null;
        } else {
            this.page3 = new ArrayList<MooseDataCardPage3>();
            for (MooseDataCardPage3 _item: _other.page3) {
                this.page3 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (_other.page4 == null) {
            this.page4 = null;
        } else {
            this.page4 = new ArrayList<MooseDataCardPage4>();
            for (MooseDataCardPage4 _item: _other.page4) {
                this.page4 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (_other.page5 == null) {
            this.page5 = null;
        } else {
            this.page5 = new ArrayList<MooseDataCardPage5>();
            for (MooseDataCardPage5 _item: _other.page5) {
                this.page5 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (_other.page6 == null) {
            this.page6 = null;
        } else {
            this.page6 = new ArrayList<MooseDataCardPage6>();
            for (MooseDataCardPage6 _item: _other.page6) {
                this.page6 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (_other.page7 == null) {
            this.page7 = null;
        } else {
            this.page7 = new ArrayList<MooseDataCardPage7>();
            for (MooseDataCardPage7 _item: _other.page7) {
                this.page7 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (_other.page8 == null) {
            this.page8 = null;
        } else {
            this.page8 = new ArrayList<MooseDataCardPage8>();
            for (MooseDataCardPage8 _item: _other.page8) {
                this.page8 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        this.imagePage = ((_other.imagePage == null)?null:_other.imagePage.createCopy());
    }

    /**
     * Instantiates a MooseDataCard copying the state of another MooseDataCard
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original MooseDataCard from which to copy state.
     */
    public MooseDataCard(final MooseDataCard _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree page1PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page1"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page1PropertyTree!= null):((page1PropertyTree == null)||(!page1PropertyTree.isLeaf())))) {
            this.page1 = ((_other.page1 == null)?null:_other.page1 .createCopy(page1PropertyTree, _propertyTreeUse));
        }
        final PropertyTree page2PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page2"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page2PropertyTree!= null):((page2PropertyTree == null)||(!page2PropertyTree.isLeaf())))) {
            if (_other.page2 == null) {
                this.page2 = null;
            } else {
                this.page2 = new ArrayList<MooseDataCardPage2>();
                for (MooseDataCardPage2 _item: _other.page2) {
                    this.page2 .add(((_item == null)?null:_item.createCopy(page2PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page3PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page3"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page3PropertyTree!= null):((page3PropertyTree == null)||(!page3PropertyTree.isLeaf())))) {
            if (_other.page3 == null) {
                this.page3 = null;
            } else {
                this.page3 = new ArrayList<MooseDataCardPage3>();
                for (MooseDataCardPage3 _item: _other.page3) {
                    this.page3 .add(((_item == null)?null:_item.createCopy(page3PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page4PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page4"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page4PropertyTree!= null):((page4PropertyTree == null)||(!page4PropertyTree.isLeaf())))) {
            if (_other.page4 == null) {
                this.page4 = null;
            } else {
                this.page4 = new ArrayList<MooseDataCardPage4>();
                for (MooseDataCardPage4 _item: _other.page4) {
                    this.page4 .add(((_item == null)?null:_item.createCopy(page4PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page5PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page5"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page5PropertyTree!= null):((page5PropertyTree == null)||(!page5PropertyTree.isLeaf())))) {
            if (_other.page5 == null) {
                this.page5 = null;
            } else {
                this.page5 = new ArrayList<MooseDataCardPage5>();
                for (MooseDataCardPage5 _item: _other.page5) {
                    this.page5 .add(((_item == null)?null:_item.createCopy(page5PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page6PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page6"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page6PropertyTree!= null):((page6PropertyTree == null)||(!page6PropertyTree.isLeaf())))) {
            if (_other.page6 == null) {
                this.page6 = null;
            } else {
                this.page6 = new ArrayList<MooseDataCardPage6>();
                for (MooseDataCardPage6 _item: _other.page6) {
                    this.page6 .add(((_item == null)?null:_item.createCopy(page6PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page7PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page7"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page7PropertyTree!= null):((page7PropertyTree == null)||(!page7PropertyTree.isLeaf())))) {
            if (_other.page7 == null) {
                this.page7 = null;
            } else {
                this.page7 = new ArrayList<MooseDataCardPage7>();
                for (MooseDataCardPage7 _item: _other.page7) {
                    this.page7 .add(((_item == null)?null:_item.createCopy(page7PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page8PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page8"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page8PropertyTree!= null):((page8PropertyTree == null)||(!page8PropertyTree.isLeaf())))) {
            if (_other.page8 == null) {
                this.page8 = null;
            } else {
                this.page8 = new ArrayList<MooseDataCardPage8>();
                for (MooseDataCardPage8 _item: _other.page8) {
                    this.page8 .add(((_item == null)?null:_item.createCopy(page8PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree imagePagePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("imagePage"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(imagePagePropertyTree!= null):((imagePagePropertyTree == null)||(!imagePagePropertyTree.isLeaf())))) {
            this.imagePage = ((_other.imagePage == null)?null:_other.imagePage.createCopy(imagePagePropertyTree, _propertyTreeUse));
        }
    }

    /**
     * Gets the value of the page1 property.
     * 
     * @return
     *     possible object is
     *     {@link MooseDataCardPage1 }
     *     
     */
    public MooseDataCardPage1 getPage1() {
        return page1;
    }

    /**
     * Sets the value of the page1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link MooseDataCardPage1 }
     *     
     */
    public void setPage1(MooseDataCardPage1 value) {
        this.page1 = value;
    }

    /**
     * Gets the value of the page2 property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page2 property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPage2().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MooseDataCardPage2 }
     * 
     * 
     */
    public List<MooseDataCardPage2> getPage2() {
        if (page2 == null) {
            page2 = new ArrayList<MooseDataCardPage2>();
        }
        return this.page2;
    }

    /**
     * Gets the value of the page3 property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page3 property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPage3().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MooseDataCardPage3 }
     * 
     * 
     */
    public List<MooseDataCardPage3> getPage3() {
        if (page3 == null) {
            page3 = new ArrayList<MooseDataCardPage3>();
        }
        return this.page3;
    }

    /**
     * Gets the value of the page4 property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page4 property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPage4().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MooseDataCardPage4 }
     * 
     * 
     */
    public List<MooseDataCardPage4> getPage4() {
        if (page4 == null) {
            page4 = new ArrayList<MooseDataCardPage4>();
        }
        return this.page4;
    }

    /**
     * Gets the value of the page5 property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page5 property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPage5().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MooseDataCardPage5 }
     * 
     * 
     */
    public List<MooseDataCardPage5> getPage5() {
        if (page5 == null) {
            page5 = new ArrayList<MooseDataCardPage5>();
        }
        return this.page5;
    }

    /**
     * Gets the value of the page6 property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page6 property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPage6().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MooseDataCardPage6 }
     * 
     * 
     */
    public List<MooseDataCardPage6> getPage6() {
        if (page6 == null) {
            page6 = new ArrayList<MooseDataCardPage6>();
        }
        return this.page6;
    }

    /**
     * Gets the value of the page7 property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page7 property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPage7().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MooseDataCardPage7 }
     * 
     * 
     */
    public List<MooseDataCardPage7> getPage7() {
        if (page7 == null) {
            page7 = new ArrayList<MooseDataCardPage7>();
        }
        return this.page7;
    }

    /**
     * Gets the value of the page8 property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page8 property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPage8().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MooseDataCardPage8 }
     * 
     * 
     */
    public List<MooseDataCardPage8> getPage8() {
        if (page8 == null) {
            page8 = new ArrayList<MooseDataCardPage8>();
        }
        return this.page8;
    }

    /**
     * Gets the value of the imagePage property.
     * 
     * @return
     *     possible object is
     *     {@link ImageType }
     *     
     */
    public ImageType getImagePage() {
        return imagePage;
    }

    /**
     * Sets the value of the imagePage property.
     * 
     * @param value
     *     allowed object is
     *     {@link ImageType }
     *     
     */
    public void setImagePage(ImageType value) {
        this.imagePage = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE2;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            MooseDataCardPage1 thePage1;
            thePage1 = this.getPage1();
            strategy.appendField(locator, this, "page1", buffer, thePage1, (this.page1 != null));
        }
        {
            List<MooseDataCardPage2> thePage2;
            thePage2 = (((this.page2 != null)&&(!this.page2 .isEmpty()))?this.getPage2():null);
            strategy.appendField(locator, this, "page2", buffer, thePage2, ((this.page2 != null)&&(!this.page2 .isEmpty())));
        }
        {
            List<MooseDataCardPage3> thePage3;
            thePage3 = (((this.page3 != null)&&(!this.page3 .isEmpty()))?this.getPage3():null);
            strategy.appendField(locator, this, "page3", buffer, thePage3, ((this.page3 != null)&&(!this.page3 .isEmpty())));
        }
        {
            List<MooseDataCardPage4> thePage4;
            thePage4 = (((this.page4 != null)&&(!this.page4 .isEmpty()))?this.getPage4():null);
            strategy.appendField(locator, this, "page4", buffer, thePage4, ((this.page4 != null)&&(!this.page4 .isEmpty())));
        }
        {
            List<MooseDataCardPage5> thePage5;
            thePage5 = (((this.page5 != null)&&(!this.page5 .isEmpty()))?this.getPage5():null);
            strategy.appendField(locator, this, "page5", buffer, thePage5, ((this.page5 != null)&&(!this.page5 .isEmpty())));
        }
        {
            List<MooseDataCardPage6> thePage6;
            thePage6 = (((this.page6 != null)&&(!this.page6 .isEmpty()))?this.getPage6():null);
            strategy.appendField(locator, this, "page6", buffer, thePage6, ((this.page6 != null)&&(!this.page6 .isEmpty())));
        }
        {
            List<MooseDataCardPage7> thePage7;
            thePage7 = (((this.page7 != null)&&(!this.page7 .isEmpty()))?this.getPage7():null);
            strategy.appendField(locator, this, "page7", buffer, thePage7, ((this.page7 != null)&&(!this.page7 .isEmpty())));
        }
        {
            List<MooseDataCardPage8> thePage8;
            thePage8 = (((this.page8 != null)&&(!this.page8 .isEmpty()))?this.getPage8():null);
            strategy.appendField(locator, this, "page8", buffer, thePage8, ((this.page8 != null)&&(!this.page8 .isEmpty())));
        }
        {
            ImageType theImagePage;
            theImagePage = this.getImagePage();
            strategy.appendField(locator, this, "imagePage", buffer, theImagePage, (this.imagePage!= null));
        }
        return buffer;
    }

    public MooseDataCard withPage1(MooseDataCardPage1 value) {
        setPage1(value);
        return this;
    }

    public MooseDataCard withPage2(MooseDataCardPage2 ... values) {
        if (values!= null) {
            for (MooseDataCardPage2 value: values) {
                getPage2().add(value);
            }
        }
        return this;
    }

    public MooseDataCard withPage2(Collection<MooseDataCardPage2> values) {
        if (values!= null) {
            getPage2().addAll(values);
        }
        return this;
    }

    public MooseDataCard withPage3(MooseDataCardPage3 ... values) {
        if (values!= null) {
            for (MooseDataCardPage3 value: values) {
                getPage3().add(value);
            }
        }
        return this;
    }

    public MooseDataCard withPage3(Collection<MooseDataCardPage3> values) {
        if (values!= null) {
            getPage3().addAll(values);
        }
        return this;
    }

    public MooseDataCard withPage4(MooseDataCardPage4 ... values) {
        if (values!= null) {
            for (MooseDataCardPage4 value: values) {
                getPage4().add(value);
            }
        }
        return this;
    }

    public MooseDataCard withPage4(Collection<MooseDataCardPage4> values) {
        if (values!= null) {
            getPage4().addAll(values);
        }
        return this;
    }

    public MooseDataCard withPage5(MooseDataCardPage5 ... values) {
        if (values!= null) {
            for (MooseDataCardPage5 value: values) {
                getPage5().add(value);
            }
        }
        return this;
    }

    public MooseDataCard withPage5(Collection<MooseDataCardPage5> values) {
        if (values!= null) {
            getPage5().addAll(values);
        }
        return this;
    }

    public MooseDataCard withPage6(MooseDataCardPage6 ... values) {
        if (values!= null) {
            for (MooseDataCardPage6 value: values) {
                getPage6().add(value);
            }
        }
        return this;
    }

    public MooseDataCard withPage6(Collection<MooseDataCardPage6> values) {
        if (values!= null) {
            getPage6().addAll(values);
        }
        return this;
    }

    public MooseDataCard withPage7(MooseDataCardPage7 ... values) {
        if (values!= null) {
            for (MooseDataCardPage7 value: values) {
                getPage7().add(value);
            }
        }
        return this;
    }

    public MooseDataCard withPage7(Collection<MooseDataCardPage7> values) {
        if (values!= null) {
            getPage7().addAll(values);
        }
        return this;
    }

    public MooseDataCard withPage8(MooseDataCardPage8 ... values) {
        if (values!= null) {
            for (MooseDataCardPage8 value: values) {
                getPage8().add(value);
            }
        }
        return this;
    }

    public MooseDataCard withPage8(Collection<MooseDataCardPage8> values) {
        if (values!= null) {
            getPage8().addAll(values);
        }
        return this;
    }

    public MooseDataCard withImagePage(ImageType value) {
        setImagePage(value);
        return this;
    }

    @Override
    public MooseDataCard clone() {
        final MooseDataCard _newObject;
        try {
            _newObject = ((MooseDataCard) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.page1 = ((this.page1 == null)?null:this.page1 .clone());
        if (this.page2 == null) {
            _newObject.page2 = null;
        } else {
            _newObject.page2 = new ArrayList<MooseDataCardPage2>();
            for (MooseDataCardPage2 _item: this.page2) {
                _newObject.page2 .add(((_item == null)?null:_item.clone()));
            }
        }
        if (this.page3 == null) {
            _newObject.page3 = null;
        } else {
            _newObject.page3 = new ArrayList<MooseDataCardPage3>();
            for (MooseDataCardPage3 _item: this.page3) {
                _newObject.page3 .add(((_item == null)?null:_item.clone()));
            }
        }
        if (this.page4 == null) {
            _newObject.page4 = null;
        } else {
            _newObject.page4 = new ArrayList<MooseDataCardPage4>();
            for (MooseDataCardPage4 _item: this.page4) {
                _newObject.page4 .add(((_item == null)?null:_item.clone()));
            }
        }
        if (this.page5 == null) {
            _newObject.page5 = null;
        } else {
            _newObject.page5 = new ArrayList<MooseDataCardPage5>();
            for (MooseDataCardPage5 _item: this.page5) {
                _newObject.page5 .add(((_item == null)?null:_item.clone()));
            }
        }
        if (this.page6 == null) {
            _newObject.page6 = null;
        } else {
            _newObject.page6 = new ArrayList<MooseDataCardPage6>();
            for (MooseDataCardPage6 _item: this.page6) {
                _newObject.page6 .add(((_item == null)?null:_item.clone()));
            }
        }
        if (this.page7 == null) {
            _newObject.page7 = null;
        } else {
            _newObject.page7 = new ArrayList<MooseDataCardPage7>();
            for (MooseDataCardPage7 _item: this.page7) {
                _newObject.page7 .add(((_item == null)?null:_item.clone()));
            }
        }
        if (this.page8 == null) {
            _newObject.page8 = null;
        } else {
            _newObject.page8 = new ArrayList<MooseDataCardPage8>();
            for (MooseDataCardPage8 _item: this.page8) {
                _newObject.page8 .add(((_item == null)?null:_item.clone()));
            }
        }
        _newObject.imagePage = ((this.imagePage == null)?null:this.imagePage.clone());
        return _newObject;
    }

    @Override
    public MooseDataCard createCopy() {
        final MooseDataCard _newObject;
        try {
            _newObject = ((MooseDataCard) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.page1 = ((this.page1 == null)?null:this.page1 .createCopy());
        if (this.page2 == null) {
            _newObject.page2 = null;
        } else {
            _newObject.page2 = new ArrayList<MooseDataCardPage2>();
            for (MooseDataCardPage2 _item: this.page2) {
                _newObject.page2 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (this.page3 == null) {
            _newObject.page3 = null;
        } else {
            _newObject.page3 = new ArrayList<MooseDataCardPage3>();
            for (MooseDataCardPage3 _item: this.page3) {
                _newObject.page3 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (this.page4 == null) {
            _newObject.page4 = null;
        } else {
            _newObject.page4 = new ArrayList<MooseDataCardPage4>();
            for (MooseDataCardPage4 _item: this.page4) {
                _newObject.page4 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (this.page5 == null) {
            _newObject.page5 = null;
        } else {
            _newObject.page5 = new ArrayList<MooseDataCardPage5>();
            for (MooseDataCardPage5 _item: this.page5) {
                _newObject.page5 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (this.page6 == null) {
            _newObject.page6 = null;
        } else {
            _newObject.page6 = new ArrayList<MooseDataCardPage6>();
            for (MooseDataCardPage6 _item: this.page6) {
                _newObject.page6 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (this.page7 == null) {
            _newObject.page7 = null;
        } else {
            _newObject.page7 = new ArrayList<MooseDataCardPage7>();
            for (MooseDataCardPage7 _item: this.page7) {
                _newObject.page7 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (this.page8 == null) {
            _newObject.page8 = null;
        } else {
            _newObject.page8 = new ArrayList<MooseDataCardPage8>();
            for (MooseDataCardPage8 _item: this.page8) {
                _newObject.page8 .add(((_item == null)?null:_item.createCopy()));
            }
        }
        _newObject.imagePage = ((this.imagePage == null)?null:this.imagePage.createCopy());
        return _newObject;
    }

    @Override
    public MooseDataCard createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final MooseDataCard _newObject;
        try {
            _newObject = ((MooseDataCard) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree page1PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page1"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page1PropertyTree!= null):((page1PropertyTree == null)||(!page1PropertyTree.isLeaf())))) {
            _newObject.page1 = ((this.page1 == null)?null:this.page1 .createCopy(page1PropertyTree, _propertyTreeUse));
        }
        final PropertyTree page2PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page2"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page2PropertyTree!= null):((page2PropertyTree == null)||(!page2PropertyTree.isLeaf())))) {
            if (this.page2 == null) {
                _newObject.page2 = null;
            } else {
                _newObject.page2 = new ArrayList<MooseDataCardPage2>();
                for (MooseDataCardPage2 _item: this.page2) {
                    _newObject.page2 .add(((_item == null)?null:_item.createCopy(page2PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page3PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page3"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page3PropertyTree!= null):((page3PropertyTree == null)||(!page3PropertyTree.isLeaf())))) {
            if (this.page3 == null) {
                _newObject.page3 = null;
            } else {
                _newObject.page3 = new ArrayList<MooseDataCardPage3>();
                for (MooseDataCardPage3 _item: this.page3) {
                    _newObject.page3 .add(((_item == null)?null:_item.createCopy(page3PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page4PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page4"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page4PropertyTree!= null):((page4PropertyTree == null)||(!page4PropertyTree.isLeaf())))) {
            if (this.page4 == null) {
                _newObject.page4 = null;
            } else {
                _newObject.page4 = new ArrayList<MooseDataCardPage4>();
                for (MooseDataCardPage4 _item: this.page4) {
                    _newObject.page4 .add(((_item == null)?null:_item.createCopy(page4PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page5PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page5"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page5PropertyTree!= null):((page5PropertyTree == null)||(!page5PropertyTree.isLeaf())))) {
            if (this.page5 == null) {
                _newObject.page5 = null;
            } else {
                _newObject.page5 = new ArrayList<MooseDataCardPage5>();
                for (MooseDataCardPage5 _item: this.page5) {
                    _newObject.page5 .add(((_item == null)?null:_item.createCopy(page5PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page6PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page6"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page6PropertyTree!= null):((page6PropertyTree == null)||(!page6PropertyTree.isLeaf())))) {
            if (this.page6 == null) {
                _newObject.page6 = null;
            } else {
                _newObject.page6 = new ArrayList<MooseDataCardPage6>();
                for (MooseDataCardPage6 _item: this.page6) {
                    _newObject.page6 .add(((_item == null)?null:_item.createCopy(page6PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page7PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page7"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page7PropertyTree!= null):((page7PropertyTree == null)||(!page7PropertyTree.isLeaf())))) {
            if (this.page7 == null) {
                _newObject.page7 = null;
            } else {
                _newObject.page7 = new ArrayList<MooseDataCardPage7>();
                for (MooseDataCardPage7 _item: this.page7) {
                    _newObject.page7 .add(((_item == null)?null:_item.createCopy(page7PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree page8PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("page8"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(page8PropertyTree!= null):((page8PropertyTree == null)||(!page8PropertyTree.isLeaf())))) {
            if (this.page8 == null) {
                _newObject.page8 = null;
            } else {
                _newObject.page8 = new ArrayList<MooseDataCardPage8>();
                for (MooseDataCardPage8 _item: this.page8) {
                    _newObject.page8 .add(((_item == null)?null:_item.createCopy(page8PropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree imagePagePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("imagePage"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(imagePagePropertyTree!= null):((imagePagePropertyTree == null)||(!imagePagePropertyTree.isLeaf())))) {
            _newObject.imagePage = ((this.imagePage == null)?null:this.imagePage.createCopy(imagePagePropertyTree, _propertyTreeUse));
        }
        return _newObject;
    }

    @Override
    public MooseDataCard copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public MooseDataCard copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends MooseDataCard.Selector<MooseDataCard.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static MooseDataCard.Select _root() {
            return new MooseDataCard.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private MooseDataCardPage1 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page1 = null;
        private MooseDataCardPage2 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page2 = null;
        private MooseDataCardPage3 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page3 = null;
        private MooseDataCardPage4 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page4 = null;
        private MooseDataCardPage5 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page5 = null;
        private MooseDataCardPage6 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page6 = null;
        private MooseDataCardPage7 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page7 = null;
        private MooseDataCardPage8 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page8 = null;
        private ImageType.Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> imagePage = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.page1 != null) {
                products.put("page1", this.page1 .init());
            }
            if (this.page2 != null) {
                products.put("page2", this.page2 .init());
            }
            if (this.page3 != null) {
                products.put("page3", this.page3 .init());
            }
            if (this.page4 != null) {
                products.put("page4", this.page4 .init());
            }
            if (this.page5 != null) {
                products.put("page5", this.page5 .init());
            }
            if (this.page6 != null) {
                products.put("page6", this.page6 .init());
            }
            if (this.page7 != null) {
                products.put("page7", this.page7 .init());
            }
            if (this.page8 != null) {
                products.put("page8", this.page8 .init());
            }
            if (this.imagePage!= null) {
                products.put("imagePage", this.imagePage.init());
            }
            return products;
        }

        public MooseDataCardPage1 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page1() {
            return ((this.page1 == null)?this.page1 = new MooseDataCardPage1 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>>(this._root, this, "page1"):this.page1);
        }

        public MooseDataCardPage2 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page2() {
            return ((this.page2 == null)?this.page2 = new MooseDataCardPage2 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>>(this._root, this, "page2"):this.page2);
        }

        public MooseDataCardPage3 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page3() {
            return ((this.page3 == null)?this.page3 = new MooseDataCardPage3 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>>(this._root, this, "page3"):this.page3);
        }

        public MooseDataCardPage4 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page4() {
            return ((this.page4 == null)?this.page4 = new MooseDataCardPage4 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>>(this._root, this, "page4"):this.page4);
        }

        public MooseDataCardPage5 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page5() {
            return ((this.page5 == null)?this.page5 = new MooseDataCardPage5 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>>(this._root, this, "page5"):this.page5);
        }

        public MooseDataCardPage6 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page6() {
            return ((this.page6 == null)?this.page6 = new MooseDataCardPage6 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>>(this._root, this, "page6"):this.page6);
        }

        public MooseDataCardPage7 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page7() {
            return ((this.page7 == null)?this.page7 = new MooseDataCardPage7 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>>(this._root, this, "page7"):this.page7);
        }

        public MooseDataCardPage8 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> page8() {
            return ((this.page8 == null)?this.page8 = new MooseDataCardPage8 .Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>>(this._root, this, "page8"):this.page8);
        }

        public ImageType.Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>> imagePage() {
            return ((this.imagePage == null)?this.imagePage = new ImageType.Selector<TRoot, MooseDataCard.Selector<TRoot, TParent>>(this._root, this, "imagePage"):this.imagePage);
        }

    }

}
