
package fi.riista.integration.luke_import.model.v1_0;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;


/**
 * <p>Java class for Documents element declaration.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;element name="Documents"&gt;
 *   &lt;complexType&gt;
 *     &lt;complexContent&gt;
 *       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *         &lt;sequence&gt;
 *           &lt;element ref="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Hirvitietokortti"/&gt;
 *         &lt;/sequence&gt;
 *       &lt;/restriction&gt;
 *     &lt;/complexContent&gt;
 *   &lt;/complexType&gt;
 * &lt;/element&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "report"
})
@XmlRootElement(name = "Documents", namespace = "http://www.abbyy.com/FlexiCapture/Schemas/Export/FormData.xsd")
public class MooseDataCardContainer implements Cloneable, Copyable, PartialCopyable, ToString2
{

    @XmlElement(name = "_Hirvitietokortti", namespace = "http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd", required = true)
    protected MooseDataCard report;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public MooseDataCardContainer() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a MooseDataCardContainer copying the state of another MooseDataCardContainer
     * 
     * @param _other
     *     The original MooseDataCardContainer from which to copy state.
     */
    public MooseDataCardContainer(final MooseDataCardContainer _other) {
        this.report = ((_other.report == null)?null:_other.report.createCopy());
    }

    /**
     * Instantiates a MooseDataCardContainer copying the state of another MooseDataCardContainer
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original MooseDataCardContainer from which to copy state.
     */
    public MooseDataCardContainer(final MooseDataCardContainer _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree reportPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("report"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(reportPropertyTree!= null):((reportPropertyTree == null)||(!reportPropertyTree.isLeaf())))) {
            this.report = ((_other.report == null)?null:_other.report.createCopy(reportPropertyTree, _propertyTreeUse));
        }
    }

    /**
     * Gets the value of the report property.
     * 
     * @return
     *     possible object is
     *     {@link MooseDataCard }
     *     
     */
    public MooseDataCard getReport() {
        return report;
    }

    /**
     * Sets the value of the report property.
     * 
     * @param value
     *     allowed object is
     *     {@link MooseDataCard }
     *     
     */
    public void setReport(MooseDataCard value) {
        this.report = value;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            MooseDataCard theReport;
            theReport = this.getReport();
            strategy.appendField(locator, this, "report", buffer, theReport, (this.report!= null));
        }
        return buffer;
    }

    public MooseDataCardContainer withReport(MooseDataCard value) {
        setReport(value);
        return this;
    }

    @Override
    public MooseDataCardContainer clone() {
        final MooseDataCardContainer _newObject;
        try {
            _newObject = ((MooseDataCardContainer) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.report = ((this.report == null)?null:this.report.clone());
        return _newObject;
    }

    @Override
    public MooseDataCardContainer createCopy() {
        final MooseDataCardContainer _newObject;
        try {
            _newObject = ((MooseDataCardContainer) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.report = ((this.report == null)?null:this.report.createCopy());
        return _newObject;
    }

    @Override
    public MooseDataCardContainer createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final MooseDataCardContainer _newObject;
        try {
            _newObject = ((MooseDataCardContainer) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree reportPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("report"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(reportPropertyTree!= null):((reportPropertyTree == null)||(!reportPropertyTree.isLeaf())))) {
            _newObject.report = ((this.report == null)?null:this.report.createCopy(reportPropertyTree, _propertyTreeUse));
        }
        return _newObject;
    }

    @Override
    public MooseDataCardContainer copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public MooseDataCardContainer copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends MooseDataCardContainer.Selector<MooseDataCardContainer.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static MooseDataCardContainer.Select _root() {
            return new MooseDataCardContainer.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private MooseDataCard.Selector<TRoot, MooseDataCardContainer.Selector<TRoot, TParent>> report = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.report!= null) {
                products.put("report", this.report.init());
            }
            return products;
        }

        public MooseDataCard.Selector<TRoot, MooseDataCardContainer.Selector<TRoot, TParent>> report() {
            return ((this.report == null)?this.report = new MooseDataCard.Selector<TRoot, MooseDataCardContainer.Selector<TRoot, TParent>>(this._root, this, "report"):this.report);
        }

    }

}
