
package fi.riista.integration.luke_import.model.v1_0;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import fi.riista.feature.huntingclub.moosedatacard.DateAndLocation;
import fi.riista.integration.support.DayAndMonthAdapter;
import org.joda.time.LocalDate;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;


/**
 * <p>Java class for _SuurpetohavainnotType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="_SuurpetohavainnotType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;group ref="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}DateAndLocationType"/&gt;
 *         &lt;element name="_Susi" type="{http://www.w3.org/2001/XMLSchema}int"/&gt;
 *         &lt;element name="_Havaintotyyppi" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="_Lis√§tiedot" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="_Karhu" type="{http://www.w3.org/2001/XMLSchema}int"/&gt;
 *         &lt;element name="_Ilves" type="{http://www.w3.org/2001/XMLSchema}int"/&gt;
 *         &lt;element name="_Ahma" type="{http://www.w3.org/2001/XMLSchema}int"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;anyAttribute namespace='http://www.abbyy.com/FlexiCapture/Schemas/Export/AdditionalFormData.xsd'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "_SuurpetohavainnotType", namespace = "http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd", propOrder = {
    "date",
    "latitude",
    "longitude",
    "numberOfWolves",
    "observationType",
    "additionalInfo",
    "numberOfBears",
    "numberOfLynxes",
    "numberOfWolverines"
})
public class MooseDataCardLargeCarnivoreObservation implements Cloneable, Copyable, PartialCopyable, DateAndLocation, ToString2
{

    @XmlElement(name = "_P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4", required = true, type = String.class)
    @XmlJavaTypeAdapter(DayAndMonthAdapter.class)
    protected LocalDate date;
    @XmlElement(name = "_Koordinaatit_P", required = true)
    protected String latitude;
    @XmlElement(name = "_Koordinaatit_I", required = true)
    protected String longitude;
    @XmlElement(name = "_Susi", required = true, type = Integer.class, nillable = true)
    protected Integer numberOfWolves;
    @XmlElement(name = "_Havaintotyyppi", required = true)
    protected String observationType;
    @XmlElement(name = "_Lis\u00e4tiedot", required = true)
    protected String additionalInfo;
    @XmlElement(name = "_Karhu", required = true, type = Integer.class, nillable = true)
    protected Integer numberOfBears;
    @XmlElement(name = "_Ilves", required = true, type = Integer.class, nillable = true)
    protected Integer numberOfLynxes;
    @XmlElement(name = "_Ahma", required = true, type = Integer.class, nillable = true)
    protected Integer numberOfWolverines;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public MooseDataCardLargeCarnivoreObservation() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a MooseDataCardLargeCarnivoreObservation copying the state of another MooseDataCardLargeCarnivoreObservation
     * 
     * @param _other
     *     The original MooseDataCardLargeCarnivoreObservation from which to copy state.
     */
    public MooseDataCardLargeCarnivoreObservation(final MooseDataCardLargeCarnivoreObservation _other) {
        this.date = _other.date;
        this.latitude = _other.latitude;
        this.longitude = _other.longitude;
        this.numberOfWolves = _other.numberOfWolves;
        this.observationType = _other.observationType;
        this.additionalInfo = _other.additionalInfo;
        this.numberOfBears = _other.numberOfBears;
        this.numberOfLynxes = _other.numberOfLynxes;
        this.numberOfWolverines = _other.numberOfWolverines;
    }

    /**
     * Instantiates a MooseDataCardLargeCarnivoreObservation copying the state of another MooseDataCardLargeCarnivoreObservation
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original MooseDataCardLargeCarnivoreObservation from which to copy state.
     */
    public MooseDataCardLargeCarnivoreObservation(final MooseDataCardLargeCarnivoreObservation _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree datePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("date"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(datePropertyTree!= null):((datePropertyTree == null)||(!datePropertyTree.isLeaf())))) {
            this.date = _other.date;
        }
        final PropertyTree latitudePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("latitude"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(latitudePropertyTree!= null):((latitudePropertyTree == null)||(!latitudePropertyTree.isLeaf())))) {
            this.latitude = _other.latitude;
        }
        final PropertyTree longitudePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("longitude"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(longitudePropertyTree!= null):((longitudePropertyTree == null)||(!longitudePropertyTree.isLeaf())))) {
            this.longitude = _other.longitude;
        }
        final PropertyTree numberOfWolvesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("numberOfWolves"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(numberOfWolvesPropertyTree!= null):((numberOfWolvesPropertyTree == null)||(!numberOfWolvesPropertyTree.isLeaf())))) {
            this.numberOfWolves = _other.numberOfWolves;
        }
        final PropertyTree observationTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("observationType"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(observationTypePropertyTree!= null):((observationTypePropertyTree == null)||(!observationTypePropertyTree.isLeaf())))) {
            this.observationType = _other.observationType;
        }
        final PropertyTree additionalInfoPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("additionalInfo"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(additionalInfoPropertyTree!= null):((additionalInfoPropertyTree == null)||(!additionalInfoPropertyTree.isLeaf())))) {
            this.additionalInfo = _other.additionalInfo;
        }
        final PropertyTree numberOfBearsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("numberOfBears"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(numberOfBearsPropertyTree!= null):((numberOfBearsPropertyTree == null)||(!numberOfBearsPropertyTree.isLeaf())))) {
            this.numberOfBears = _other.numberOfBears;
        }
        final PropertyTree numberOfLynxesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("numberOfLynxes"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(numberOfLynxesPropertyTree!= null):((numberOfLynxesPropertyTree == null)||(!numberOfLynxesPropertyTree.isLeaf())))) {
            this.numberOfLynxes = _other.numberOfLynxes;
        }
        final PropertyTree numberOfWolverinesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("numberOfWolverines"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(numberOfWolverinesPropertyTree!= null):((numberOfWolverinesPropertyTree == null)||(!numberOfWolverinesPropertyTree.isLeaf())))) {
            this.numberOfWolverines = _other.numberOfWolverines;
        }
    }

    /**
     * Gets the value of the date property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public LocalDate getDate() {
        return date;
    }

    /**
     * Sets the value of the date property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDate(LocalDate value) {
        this.date = value;
    }

    /**
     * Gets the value of the latitude property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLatitude() {
        return latitude;
    }

    /**
     * Sets the value of the latitude property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLatitude(String value) {
        this.latitude = value;
    }

    /**
     * Gets the value of the longitude property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLongitude() {
        return longitude;
    }

    /**
     * Sets the value of the longitude property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLongitude(String value) {
        this.longitude = value;
    }

    /**
     * Gets the value of the numberOfWolves property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getNumberOfWolves() {
        return numberOfWolves;
    }

    /**
     * Sets the value of the numberOfWolves property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setNumberOfWolves(Integer value) {
        this.numberOfWolves = value;
    }

    /**
     * Gets the value of the observationType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getObservationType() {
        return observationType;
    }

    /**
     * Sets the value of the observationType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setObservationType(String value) {
        this.observationType = value;
    }

    /**
     * Gets the value of the additionalInfo property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAdditionalInfo() {
        return additionalInfo;
    }

    /**
     * Sets the value of the additionalInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAdditionalInfo(String value) {
        this.additionalInfo = value;
    }

    /**
     * Gets the value of the numberOfBears property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getNumberOfBears() {
        return numberOfBears;
    }

    /**
     * Sets the value of the numberOfBears property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setNumberOfBears(Integer value) {
        this.numberOfBears = value;
    }

    /**
     * Gets the value of the numberOfLynxes property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getNumberOfLynxes() {
        return numberOfLynxes;
    }

    /**
     * Sets the value of the numberOfLynxes property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setNumberOfLynxes(Integer value) {
        this.numberOfLynxes = value;
    }

    /**
     * Gets the value of the numberOfWolverines property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getNumberOfWolverines() {
        return numberOfWolverines;
    }

    /**
     * Sets the value of the numberOfWolverines property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setNumberOfWolverines(Integer value) {
        this.numberOfWolverines = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE2;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            LocalDate theDate;
            theDate = this.getDate();
            strategy.appendField(locator, this, "date", buffer, theDate, (this.date!= null));
        }
        {
            String theLatitude;
            theLatitude = this.getLatitude();
            strategy.appendField(locator, this, "latitude", buffer, theLatitude, (this.latitude!= null));
        }
        {
            String theLongitude;
            theLongitude = this.getLongitude();
            strategy.appendField(locator, this, "longitude", buffer, theLongitude, (this.longitude!= null));
        }
        {
            Integer theNumberOfWolves;
            theNumberOfWolves = this.getNumberOfWolves();
            strategy.appendField(locator, this, "numberOfWolves", buffer, theNumberOfWolves, (this.numberOfWolves!= null));
        }
        {
            String theObservationType;
            theObservationType = this.getObservationType();
            strategy.appendField(locator, this, "observationType", buffer, theObservationType, (this.observationType!= null));
        }
        {
            String theAdditionalInfo;
            theAdditionalInfo = this.getAdditionalInfo();
            strategy.appendField(locator, this, "additionalInfo", buffer, theAdditionalInfo, (this.additionalInfo!= null));
        }
        {
            Integer theNumberOfBears;
            theNumberOfBears = this.getNumberOfBears();
            strategy.appendField(locator, this, "numberOfBears", buffer, theNumberOfBears, (this.numberOfBears!= null));
        }
        {
            Integer theNumberOfLynxes;
            theNumberOfLynxes = this.getNumberOfLynxes();
            strategy.appendField(locator, this, "numberOfLynxes", buffer, theNumberOfLynxes, (this.numberOfLynxes!= null));
        }
        {
            Integer theNumberOfWolverines;
            theNumberOfWolverines = this.getNumberOfWolverines();
            strategy.appendField(locator, this, "numberOfWolverines", buffer, theNumberOfWolverines, (this.numberOfWolverines!= null));
        }
        return buffer;
    }

    public MooseDataCardLargeCarnivoreObservation withDate(LocalDate value) {
        setDate(value);
        return this;
    }

    public MooseDataCardLargeCarnivoreObservation withLatitude(String value) {
        setLatitude(value);
        return this;
    }

    public MooseDataCardLargeCarnivoreObservation withLongitude(String value) {
        setLongitude(value);
        return this;
    }

    public MooseDataCardLargeCarnivoreObservation withNumberOfWolves(Integer value) {
        setNumberOfWolves(value);
        return this;
    }

    public MooseDataCardLargeCarnivoreObservation withObservationType(String value) {
        setObservationType(value);
        return this;
    }

    public MooseDataCardLargeCarnivoreObservation withAdditionalInfo(String value) {
        setAdditionalInfo(value);
        return this;
    }

    public MooseDataCardLargeCarnivoreObservation withNumberOfBears(Integer value) {
        setNumberOfBears(value);
        return this;
    }

    public MooseDataCardLargeCarnivoreObservation withNumberOfLynxes(Integer value) {
        setNumberOfLynxes(value);
        return this;
    }

    public MooseDataCardLargeCarnivoreObservation withNumberOfWolverines(Integer value) {
        setNumberOfWolverines(value);
        return this;
    }

    @Override
    public MooseDataCardLargeCarnivoreObservation clone() {
        final MooseDataCardLargeCarnivoreObservation _newObject;
        try {
            _newObject = ((MooseDataCardLargeCarnivoreObservation) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public MooseDataCardLargeCarnivoreObservation createCopy() {
        final MooseDataCardLargeCarnivoreObservation _newObject;
        try {
            _newObject = ((MooseDataCardLargeCarnivoreObservation) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.date = this.date;
        _newObject.latitude = this.latitude;
        _newObject.longitude = this.longitude;
        _newObject.numberOfWolves = this.numberOfWolves;
        _newObject.observationType = this.observationType;
        _newObject.additionalInfo = this.additionalInfo;
        _newObject.numberOfBears = this.numberOfBears;
        _newObject.numberOfLynxes = this.numberOfLynxes;
        _newObject.numberOfWolverines = this.numberOfWolverines;
        return _newObject;
    }

    @Override
    public MooseDataCardLargeCarnivoreObservation createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final MooseDataCardLargeCarnivoreObservation _newObject;
        try {
            _newObject = ((MooseDataCardLargeCarnivoreObservation) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree datePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("date"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(datePropertyTree!= null):((datePropertyTree == null)||(!datePropertyTree.isLeaf())))) {
            _newObject.date = this.date;
        }
        final PropertyTree latitudePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("latitude"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(latitudePropertyTree!= null):((latitudePropertyTree == null)||(!latitudePropertyTree.isLeaf())))) {
            _newObject.latitude = this.latitude;
        }
        final PropertyTree longitudePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("longitude"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(longitudePropertyTree!= null):((longitudePropertyTree == null)||(!longitudePropertyTree.isLeaf())))) {
            _newObject.longitude = this.longitude;
        }
        final PropertyTree numberOfWolvesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("numberOfWolves"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(numberOfWolvesPropertyTree!= null):((numberOfWolvesPropertyTree == null)||(!numberOfWolvesPropertyTree.isLeaf())))) {
            _newObject.numberOfWolves = this.numberOfWolves;
        }
        final PropertyTree observationTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("observationType"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(observationTypePropertyTree!= null):((observationTypePropertyTree == null)||(!observationTypePropertyTree.isLeaf())))) {
            _newObject.observationType = this.observationType;
        }
        final PropertyTree additionalInfoPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("additionalInfo"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(additionalInfoPropertyTree!= null):((additionalInfoPropertyTree == null)||(!additionalInfoPropertyTree.isLeaf())))) {
            _newObject.additionalInfo = this.additionalInfo;
        }
        final PropertyTree numberOfBearsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("numberOfBears"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(numberOfBearsPropertyTree!= null):((numberOfBearsPropertyTree == null)||(!numberOfBearsPropertyTree.isLeaf())))) {
            _newObject.numberOfBears = this.numberOfBears;
        }
        final PropertyTree numberOfLynxesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("numberOfLynxes"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(numberOfLynxesPropertyTree!= null):((numberOfLynxesPropertyTree == null)||(!numberOfLynxesPropertyTree.isLeaf())))) {
            _newObject.numberOfLynxes = this.numberOfLynxes;
        }
        final PropertyTree numberOfWolverinesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("numberOfWolverines"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(numberOfWolverinesPropertyTree!= null):((numberOfWolverinesPropertyTree == null)||(!numberOfWolverinesPropertyTree.isLeaf())))) {
            _newObject.numberOfWolverines = this.numberOfWolverines;
        }
        return _newObject;
    }

    @Override
    public MooseDataCardLargeCarnivoreObservation copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public MooseDataCardLargeCarnivoreObservation copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends MooseDataCardLargeCarnivoreObservation.Selector<MooseDataCardLargeCarnivoreObservation.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static MooseDataCardLargeCarnivoreObservation.Select _root() {
            return new MooseDataCardLargeCarnivoreObservation.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> date = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> latitude = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> longitude = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> numberOfWolves = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> observationType = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> additionalInfo = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> numberOfBears = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> numberOfLynxes = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> numberOfWolverines = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.date!= null) {
                products.put("date", this.date.init());
            }
            if (this.latitude!= null) {
                products.put("latitude", this.latitude.init());
            }
            if (this.longitude!= null) {
                products.put("longitude", this.longitude.init());
            }
            if (this.numberOfWolves!= null) {
                products.put("numberOfWolves", this.numberOfWolves.init());
            }
            if (this.observationType!= null) {
                products.put("observationType", this.observationType.init());
            }
            if (this.additionalInfo!= null) {
                products.put("additionalInfo", this.additionalInfo.init());
            }
            if (this.numberOfBears!= null) {
                products.put("numberOfBears", this.numberOfBears.init());
            }
            if (this.numberOfLynxes!= null) {
                products.put("numberOfLynxes", this.numberOfLynxes.init());
            }
            if (this.numberOfWolverines!= null) {
                products.put("numberOfWolverines", this.numberOfWolverines.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> date() {
            return ((this.date == null)?this.date = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>>(this._root, this, "date"):this.date);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> latitude() {
            return ((this.latitude == null)?this.latitude = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>>(this._root, this, "latitude"):this.latitude);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> longitude() {
            return ((this.longitude == null)?this.longitude = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>>(this._root, this, "longitude"):this.longitude);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> numberOfWolves() {
            return ((this.numberOfWolves == null)?this.numberOfWolves = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>>(this._root, this, "numberOfWolves"):this.numberOfWolves);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> observationType() {
            return ((this.observationType == null)?this.observationType = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>>(this._root, this, "observationType"):this.observationType);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> additionalInfo() {
            return ((this.additionalInfo == null)?this.additionalInfo = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>>(this._root, this, "additionalInfo"):this.additionalInfo);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> numberOfBears() {
            return ((this.numberOfBears == null)?this.numberOfBears = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>>(this._root, this, "numberOfBears"):this.numberOfBears);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> numberOfLynxes() {
            return ((this.numberOfLynxes == null)?this.numberOfLynxes = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>>(this._root, this, "numberOfLynxes"):this.numberOfLynxes);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>> numberOfWolverines() {
            return ((this.numberOfWolverines == null)?this.numberOfWolverines = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardLargeCarnivoreObservation.Selector<TRoot, TParent>>(this._root, this, "numberOfWolverines"):this.numberOfWolverines);
        }

    }

}
