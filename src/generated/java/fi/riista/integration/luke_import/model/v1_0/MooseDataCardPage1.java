
package fi.riista.integration.luke_import.model.v1_0;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;


/**
 * <p>Java class for _Sivu_1Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="_Sivu_1Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="_1.1" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_1.1Type"/&gt;
 *         &lt;element name="_1.2" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_1.2Type"/&gt;
 *         &lt;element name="_Asiakasnumero" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="_Pyyntilupa" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;anyAttribute namespace='http://www.abbyy.com/FlexiCapture/Schemas/Export/AdditionalFormData.xsd'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "_Sivu_1Type", namespace = "http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd", propOrder = {
    "clubInfo",
    "contactPerson",
    "huntingClubCode",
    "permitNumber"
})
public class MooseDataCardPage1 implements Cloneable, Copyable, PartialCopyable, ToString2
{

    @XmlElement(name = "_1.1", required = true)
    protected MooseDataCardClubInfo clubInfo;
    @XmlElement(name = "_1.2", required = true)
    protected MooseDataCardContactPerson contactPerson;
    @XmlElement(name = "_Asiakasnumero", required = true)
    protected String huntingClubCode;
    @XmlElement(name = "_Pyyntilupa", required = true)
    protected String permitNumber;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public MooseDataCardPage1() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a MooseDataCardPage1 copying the state of another MooseDataCardPage1
     * 
     * @param _other
     *     The original MooseDataCardPage1 from which to copy state.
     */
    public MooseDataCardPage1(final MooseDataCardPage1 _other) {
        this.clubInfo = ((_other.clubInfo == null)?null:_other.clubInfo.createCopy());
        this.contactPerson = ((_other.contactPerson == null)?null:_other.contactPerson.createCopy());
        this.huntingClubCode = _other.huntingClubCode;
        this.permitNumber = _other.permitNumber;
    }

    /**
     * Instantiates a MooseDataCardPage1 copying the state of another MooseDataCardPage1
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original MooseDataCardPage1 from which to copy state.
     */
    public MooseDataCardPage1(final MooseDataCardPage1 _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree clubInfoPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clubInfo"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clubInfoPropertyTree!= null):((clubInfoPropertyTree == null)||(!clubInfoPropertyTree.isLeaf())))) {
            this.clubInfo = ((_other.clubInfo == null)?null:_other.clubInfo.createCopy(clubInfoPropertyTree, _propertyTreeUse));
        }
        final PropertyTree contactPersonPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactPerson"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactPersonPropertyTree!= null):((contactPersonPropertyTree == null)||(!contactPersonPropertyTree.isLeaf())))) {
            this.contactPerson = ((_other.contactPerson == null)?null:_other.contactPerson.createCopy(contactPersonPropertyTree, _propertyTreeUse));
        }
        final PropertyTree huntingClubCodePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("huntingClubCode"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(huntingClubCodePropertyTree!= null):((huntingClubCodePropertyTree == null)||(!huntingClubCodePropertyTree.isLeaf())))) {
            this.huntingClubCode = _other.huntingClubCode;
        }
        final PropertyTree permitNumberPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("permitNumber"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(permitNumberPropertyTree!= null):((permitNumberPropertyTree == null)||(!permitNumberPropertyTree.isLeaf())))) {
            this.permitNumber = _other.permitNumber;
        }
    }

    /**
     * Gets the value of the clubInfo property.
     * 
     * @return
     *     possible object is
     *     {@link MooseDataCardClubInfo }
     *     
     */
    public MooseDataCardClubInfo getClubInfo() {
        return clubInfo;
    }

    /**
     * Sets the value of the clubInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link MooseDataCardClubInfo }
     *     
     */
    public void setClubInfo(MooseDataCardClubInfo value) {
        this.clubInfo = value;
    }

    /**
     * Gets the value of the contactPerson property.
     * 
     * @return
     *     possible object is
     *     {@link MooseDataCardContactPerson }
     *     
     */
    public MooseDataCardContactPerson getContactPerson() {
        return contactPerson;
    }

    /**
     * Sets the value of the contactPerson property.
     * 
     * @param value
     *     allowed object is
     *     {@link MooseDataCardContactPerson }
     *     
     */
    public void setContactPerson(MooseDataCardContactPerson value) {
        this.contactPerson = value;
    }

    /**
     * Gets the value of the huntingClubCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHuntingClubCode() {
        return huntingClubCode;
    }

    /**
     * Sets the value of the huntingClubCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHuntingClubCode(String value) {
        this.huntingClubCode = value;
    }

    /**
     * Gets the value of the permitNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPermitNumber() {
        return permitNumber;
    }

    /**
     * Sets the value of the permitNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPermitNumber(String value) {
        this.permitNumber = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            MooseDataCardClubInfo theClubInfo;
            theClubInfo = this.getClubInfo();
            strategy.appendField(locator, this, "clubInfo", buffer, theClubInfo, (this.clubInfo!= null));
        }
        {
            MooseDataCardContactPerson theContactPerson;
            theContactPerson = this.getContactPerson();
            strategy.appendField(locator, this, "contactPerson", buffer, theContactPerson, (this.contactPerson!= null));
        }
        {
            String theHuntingClubCode;
            theHuntingClubCode = this.getHuntingClubCode();
            strategy.appendField(locator, this, "huntingClubCode", buffer, theHuntingClubCode, (this.huntingClubCode!= null));
        }
        {
            String thePermitNumber;
            thePermitNumber = this.getPermitNumber();
            strategy.appendField(locator, this, "permitNumber", buffer, thePermitNumber, (this.permitNumber!= null));
        }
        return buffer;
    }

    public MooseDataCardPage1 withClubInfo(MooseDataCardClubInfo value) {
        setClubInfo(value);
        return this;
    }

    public MooseDataCardPage1 withContactPerson(MooseDataCardContactPerson value) {
        setContactPerson(value);
        return this;
    }

    public MooseDataCardPage1 withHuntingClubCode(String value) {
        setHuntingClubCode(value);
        return this;
    }

    public MooseDataCardPage1 withPermitNumber(String value) {
        setPermitNumber(value);
        return this;
    }

    @Override
    public MooseDataCardPage1 clone() {
        final MooseDataCardPage1 _newObject;
        try {
            _newObject = ((MooseDataCardPage1) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.clubInfo = ((this.clubInfo == null)?null:this.clubInfo.clone());
        _newObject.contactPerson = ((this.contactPerson == null)?null:this.contactPerson.clone());
        return _newObject;
    }

    @Override
    public MooseDataCardPage1 createCopy() {
        final MooseDataCardPage1 _newObject;
        try {
            _newObject = ((MooseDataCardPage1) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.clubInfo = ((this.clubInfo == null)?null:this.clubInfo.createCopy());
        _newObject.contactPerson = ((this.contactPerson == null)?null:this.contactPerson.createCopy());
        _newObject.huntingClubCode = this.huntingClubCode;
        _newObject.permitNumber = this.permitNumber;
        return _newObject;
    }

    @Override
    public MooseDataCardPage1 createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final MooseDataCardPage1 _newObject;
        try {
            _newObject = ((MooseDataCardPage1) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree clubInfoPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clubInfo"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clubInfoPropertyTree!= null):((clubInfoPropertyTree == null)||(!clubInfoPropertyTree.isLeaf())))) {
            _newObject.clubInfo = ((this.clubInfo == null)?null:this.clubInfo.createCopy(clubInfoPropertyTree, _propertyTreeUse));
        }
        final PropertyTree contactPersonPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactPerson"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactPersonPropertyTree!= null):((contactPersonPropertyTree == null)||(!contactPersonPropertyTree.isLeaf())))) {
            _newObject.contactPerson = ((this.contactPerson == null)?null:this.contactPerson.createCopy(contactPersonPropertyTree, _propertyTreeUse));
        }
        final PropertyTree huntingClubCodePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("huntingClubCode"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(huntingClubCodePropertyTree!= null):((huntingClubCodePropertyTree == null)||(!huntingClubCodePropertyTree.isLeaf())))) {
            _newObject.huntingClubCode = this.huntingClubCode;
        }
        final PropertyTree permitNumberPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("permitNumber"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(permitNumberPropertyTree!= null):((permitNumberPropertyTree == null)||(!permitNumberPropertyTree.isLeaf())))) {
            _newObject.permitNumber = this.permitNumber;
        }
        return _newObject;
    }

    @Override
    public MooseDataCardPage1 copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public MooseDataCardPage1 copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends MooseDataCardPage1 .Selector<MooseDataCardPage1 .Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static MooseDataCardPage1 .Select _root() {
            return new MooseDataCardPage1 .Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private MooseDataCardClubInfo.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>> clubInfo = null;
        private MooseDataCardContactPerson.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>> contactPerson = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>> huntingClubCode = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>> permitNumber = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.clubInfo!= null) {
                products.put("clubInfo", this.clubInfo.init());
            }
            if (this.contactPerson!= null) {
                products.put("contactPerson", this.contactPerson.init());
            }
            if (this.huntingClubCode!= null) {
                products.put("huntingClubCode", this.huntingClubCode.init());
            }
            if (this.permitNumber!= null) {
                products.put("permitNumber", this.permitNumber.init());
            }
            return products;
        }

        public MooseDataCardClubInfo.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>> clubInfo() {
            return ((this.clubInfo == null)?this.clubInfo = new MooseDataCardClubInfo.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>>(this._root, this, "clubInfo"):this.clubInfo);
        }

        public MooseDataCardContactPerson.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>> contactPerson() {
            return ((this.contactPerson == null)?this.contactPerson = new MooseDataCardContactPerson.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>>(this._root, this, "contactPerson"):this.contactPerson);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>> huntingClubCode() {
            return ((this.huntingClubCode == null)?this.huntingClubCode = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>>(this._root, this, "huntingClubCode"):this.huntingClubCode);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>> permitNumber() {
            return ((this.permitNumber == null)?this.permitNumber = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardPage1 .Selector<TRoot, TParent>>(this._root, this, "permitNumber"):this.permitNumber);
        }

    }

}
