
package fi.riista.integration.luke_import.model.v1_0;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;


/**
 * <p>Java class for _2.1Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="_2.1Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="_Mets채stysp채ivien_olosuhdetiedot" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Mets채stysp채ivien_olosuhdetiedotType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;anyAttribute namespace='http://www.abbyy.com/FlexiCapture/Schemas/Export/AdditionalFormData.xsd'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "_2.1Type", namespace = "http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd", propOrder = {
    "huntingDays"
})
public class MooseDataCardSection_2_1 implements Cloneable, Copyable, PartialCopyable, ToString2
{

    @XmlElement(name = "_Mets\u00e4stysp\u00e4ivien_olosuhdetiedot")
    protected List<MooseDataCardHuntingDay> huntingDays;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public MooseDataCardSection_2_1() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a MooseDataCardSection_2_1 copying the state of another MooseDataCardSection_2_1
     * 
     * @param _other
     *     The original MooseDataCardSection_2_1 from which to copy state.
     */
    public MooseDataCardSection_2_1(final MooseDataCardSection_2_1 _other) {
        if (_other.huntingDays == null) {
            this.huntingDays = null;
        } else {
            this.huntingDays = new ArrayList<MooseDataCardHuntingDay>();
            for (MooseDataCardHuntingDay _item: _other.huntingDays) {
                this.huntingDays.add(((_item == null)?null:_item.createCopy()));
            }
        }
    }

    /**
     * Instantiates a MooseDataCardSection_2_1 copying the state of another MooseDataCardSection_2_1
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original MooseDataCardSection_2_1 from which to copy state.
     */
    public MooseDataCardSection_2_1(final MooseDataCardSection_2_1 _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree huntingDaysPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("huntingDays"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(huntingDaysPropertyTree!= null):((huntingDaysPropertyTree == null)||(!huntingDaysPropertyTree.isLeaf())))) {
            if (_other.huntingDays == null) {
                this.huntingDays = null;
            } else {
                this.huntingDays = new ArrayList<MooseDataCardHuntingDay>();
                for (MooseDataCardHuntingDay _item: _other.huntingDays) {
                    this.huntingDays.add(((_item == null)?null:_item.createCopy(huntingDaysPropertyTree, _propertyTreeUse)));
                }
            }
        }
    }

    /**
     * Gets the value of the huntingDays property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the huntingDays property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getHuntingDays().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MooseDataCardHuntingDay }
     * 
     * 
     */
    public List<MooseDataCardHuntingDay> getHuntingDays() {
        if (huntingDays == null) {
            huntingDays = new ArrayList<MooseDataCardHuntingDay>();
        }
        return this.huntingDays;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE2;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<MooseDataCardHuntingDay> theHuntingDays;
            theHuntingDays = (((this.huntingDays!= null)&&(!this.huntingDays.isEmpty()))?this.getHuntingDays():null);
            strategy.appendField(locator, this, "huntingDays", buffer, theHuntingDays, ((this.huntingDays!= null)&&(!this.huntingDays.isEmpty())));
        }
        return buffer;
    }

    public MooseDataCardSection_2_1 withHuntingDays(MooseDataCardHuntingDay... values) {
        if (values!= null) {
            for (MooseDataCardHuntingDay value: values) {
                getHuntingDays().add(value);
            }
        }
        return this;
    }

    public MooseDataCardSection_2_1 withHuntingDays(Collection<MooseDataCardHuntingDay> values) {
        if (values!= null) {
            getHuntingDays().addAll(values);
        }
        return this;
    }

    @Override
    public MooseDataCardSection_2_1 clone() {
        final MooseDataCardSection_2_1 _newObject;
        try {
            _newObject = ((MooseDataCardSection_2_1) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        if (this.huntingDays == null) {
            _newObject.huntingDays = null;
        } else {
            _newObject.huntingDays = new ArrayList<MooseDataCardHuntingDay>();
            for (MooseDataCardHuntingDay _item: this.huntingDays) {
                _newObject.huntingDays.add(((_item == null)?null:_item.clone()));
            }
        }
        return _newObject;
    }

    @Override
    public MooseDataCardSection_2_1 createCopy() {
        final MooseDataCardSection_2_1 _newObject;
        try {
            _newObject = ((MooseDataCardSection_2_1) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        if (this.huntingDays == null) {
            _newObject.huntingDays = null;
        } else {
            _newObject.huntingDays = new ArrayList<MooseDataCardHuntingDay>();
            for (MooseDataCardHuntingDay _item: this.huntingDays) {
                _newObject.huntingDays.add(((_item == null)?null:_item.createCopy()));
            }
        }
        return _newObject;
    }

    @Override
    public MooseDataCardSection_2_1 createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final MooseDataCardSection_2_1 _newObject;
        try {
            _newObject = ((MooseDataCardSection_2_1) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree huntingDaysPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("huntingDays"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(huntingDaysPropertyTree!= null):((huntingDaysPropertyTree == null)||(!huntingDaysPropertyTree.isLeaf())))) {
            if (this.huntingDays == null) {
                _newObject.huntingDays = null;
            } else {
                _newObject.huntingDays = new ArrayList<MooseDataCardHuntingDay>();
                for (MooseDataCardHuntingDay _item: this.huntingDays) {
                    _newObject.huntingDays.add(((_item == null)?null:_item.createCopy(huntingDaysPropertyTree, _propertyTreeUse)));
                }
            }
        }
        return _newObject;
    }

    @Override
    public MooseDataCardSection_2_1 copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public MooseDataCardSection_2_1 copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends MooseDataCardSection_2_1 .Selector<MooseDataCardSection_2_1 .Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static MooseDataCardSection_2_1 .Select _root() {
            return new MooseDataCardSection_2_1 .Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private MooseDataCardHuntingDay.Selector<TRoot, MooseDataCardSection_2_1 .Selector<TRoot, TParent>> huntingDays = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.huntingDays!= null) {
                products.put("huntingDays", this.huntingDays.init());
            }
            return products;
        }

        public MooseDataCardHuntingDay.Selector<TRoot, MooseDataCardSection_2_1 .Selector<TRoot, TParent>> huntingDays() {
            return ((this.huntingDays == null)?this.huntingDays = new MooseDataCardHuntingDay.Selector<TRoot, MooseDataCardSection_2_1 .Selector<TRoot, TParent>>(this._root, this, "huntingDays"):this.huntingDays);
        }

    }

}
