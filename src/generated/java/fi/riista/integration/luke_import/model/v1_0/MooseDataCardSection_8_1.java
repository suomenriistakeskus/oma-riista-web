
package fi.riista.integration.luke_import.model.v1_0;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;


/**
 * <p>Java class for _8.1Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="_8.1Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="_Metsästysalueen_kokonaispinta-ala" type="{http://www.w3.org/2001/XMLSchema}double"/&gt;
 *         &lt;element name="_Metsästykseen_käytetyn_alueen_pinta-ala" type="{http://www.w3.org/2001/XMLSchema}double"/&gt;
 *         &lt;element name="_Metsästykseen_käytetyn_alueen_pinta-ala_2" type="{http://www.w3.org/2001/XMLSchema}double"/&gt;
 *         &lt;element name="_Koko_metsästysalueelle_jäi_hirviä_yhteensä" type="{http://www.w3.org/2001/XMLSchema}int"/&gt;
 *         &lt;element name="_Metsästykseen_käytetylle_alueelle_jäi_hirviä_yhteensä" type="{http://www.w3.org/2001/XMLSchema}int"/&gt;
 *         &lt;element name="_Metsästysalueemme_on" type="{http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd}_Metsästysalueemme_onType"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;anyAttribute namespace='http://www.abbyy.com/FlexiCapture/Schemas/Export/AdditionalFormData.xsd'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "_8.1Type", namespace = "http://www.abbyy.com/FlexiCapture/Schemas/Export/Hirvitietokortti.xsd", propOrder = {
    "totalHuntingArea",
    "effectiveHuntingArea",
    "effectiveHuntingAreaPercentage",
    "moosesRemainingInTotalHuntingArea",
    "moosesRemainingInEffectiveHuntingArea",
    "huntingAreaType"
})
public class MooseDataCardSection_8_1 implements Cloneable, Copyable, PartialCopyable, ToString2
{

    @XmlElement(name = "_Mets\u00e4stysalueen_kokonaispinta-ala", required = true, type = Double.class, nillable = true)
    protected Double totalHuntingArea;
    @XmlElement(name = "_Mets\u00e4stykseen_k\u00e4ytetyn_alueen_pinta-ala", required = true, type = Double.class, nillable = true)
    protected Double effectiveHuntingArea;
    @XmlElement(name = "_Mets\u00e4stykseen_k\u00e4ytetyn_alueen_pinta-ala_2", required = true, type = Double.class, nillable = true)
    protected Double effectiveHuntingAreaPercentage;
    @XmlElement(name = "_Koko_mets\u00e4stysalueelle_j\u00e4i_hirvi\u00e4_yhteens\u00e4", required = true, type = Integer.class, nillable = true)
    protected Integer moosesRemainingInTotalHuntingArea;
    @XmlElement(name = "_Mets\u00e4stykseen_k\u00e4ytetylle_alueelle_j\u00e4i_hirvi\u00e4_yhteens\u00e4", required = true, type = Integer.class, nillable = true)
    protected Integer moosesRemainingInEffectiveHuntingArea;
    @XmlElement(name = "_Mets\u00e4stysalueemme_on", required = true)
    @XmlSchemaType(name = "string")
    protected MooseDataCardHarvestAreaType huntingAreaType;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public MooseDataCardSection_8_1() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a MooseDataCardSection_8_1 copying the state of another MooseDataCardSection_8_1
     * 
     * @param _other
     *     The original MooseDataCardSection_8_1 from which to copy state.
     */
    public MooseDataCardSection_8_1(final MooseDataCardSection_8_1 _other) {
        this.totalHuntingArea = _other.totalHuntingArea;
        this.effectiveHuntingArea = _other.effectiveHuntingArea;
        this.effectiveHuntingAreaPercentage = _other.effectiveHuntingAreaPercentage;
        this.moosesRemainingInTotalHuntingArea = _other.moosesRemainingInTotalHuntingArea;
        this.moosesRemainingInEffectiveHuntingArea = _other.moosesRemainingInEffectiveHuntingArea;
        this.huntingAreaType = _other.huntingAreaType;
    }

    /**
     * Instantiates a MooseDataCardSection_8_1 copying the state of another MooseDataCardSection_8_1
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original MooseDataCardSection_8_1 from which to copy state.
     */
    public MooseDataCardSection_8_1(final MooseDataCardSection_8_1 _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree totalHuntingAreaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("totalHuntingArea"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(totalHuntingAreaPropertyTree!= null):((totalHuntingAreaPropertyTree == null)||(!totalHuntingAreaPropertyTree.isLeaf())))) {
            this.totalHuntingArea = _other.totalHuntingArea;
        }
        final PropertyTree effectiveHuntingAreaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("effectiveHuntingArea"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(effectiveHuntingAreaPropertyTree!= null):((effectiveHuntingAreaPropertyTree == null)||(!effectiveHuntingAreaPropertyTree.isLeaf())))) {
            this.effectiveHuntingArea = _other.effectiveHuntingArea;
        }
        final PropertyTree effectiveHuntingAreaPercentagePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("effectiveHuntingAreaPercentage"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(effectiveHuntingAreaPercentagePropertyTree!= null):((effectiveHuntingAreaPercentagePropertyTree == null)||(!effectiveHuntingAreaPercentagePropertyTree.isLeaf())))) {
            this.effectiveHuntingAreaPercentage = _other.effectiveHuntingAreaPercentage;
        }
        final PropertyTree moosesRemainingInTotalHuntingAreaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("moosesRemainingInTotalHuntingArea"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(moosesRemainingInTotalHuntingAreaPropertyTree!= null):((moosesRemainingInTotalHuntingAreaPropertyTree == null)||(!moosesRemainingInTotalHuntingAreaPropertyTree.isLeaf())))) {
            this.moosesRemainingInTotalHuntingArea = _other.moosesRemainingInTotalHuntingArea;
        }
        final PropertyTree moosesRemainingInEffectiveHuntingAreaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("moosesRemainingInEffectiveHuntingArea"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(moosesRemainingInEffectiveHuntingAreaPropertyTree!= null):((moosesRemainingInEffectiveHuntingAreaPropertyTree == null)||(!moosesRemainingInEffectiveHuntingAreaPropertyTree.isLeaf())))) {
            this.moosesRemainingInEffectiveHuntingArea = _other.moosesRemainingInEffectiveHuntingArea;
        }
        final PropertyTree huntingAreaTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("huntingAreaType"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(huntingAreaTypePropertyTree!= null):((huntingAreaTypePropertyTree == null)||(!huntingAreaTypePropertyTree.isLeaf())))) {
            this.huntingAreaType = _other.huntingAreaType;
        }
    }

    /**
     * Gets the value of the totalHuntingArea property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getTotalHuntingArea() {
        return totalHuntingArea;
    }

    /**
     * Sets the value of the totalHuntingArea property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setTotalHuntingArea(Double value) {
        this.totalHuntingArea = value;
    }

    /**
     * Gets the value of the effectiveHuntingArea property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getEffectiveHuntingArea() {
        return effectiveHuntingArea;
    }

    /**
     * Sets the value of the effectiveHuntingArea property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setEffectiveHuntingArea(Double value) {
        this.effectiveHuntingArea = value;
    }

    /**
     * Gets the value of the effectiveHuntingAreaPercentage property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getEffectiveHuntingAreaPercentage() {
        return effectiveHuntingAreaPercentage;
    }

    /**
     * Sets the value of the effectiveHuntingAreaPercentage property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setEffectiveHuntingAreaPercentage(Double value) {
        this.effectiveHuntingAreaPercentage = value;
    }

    /**
     * Gets the value of the moosesRemainingInTotalHuntingArea property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMoosesRemainingInTotalHuntingArea() {
        return moosesRemainingInTotalHuntingArea;
    }

    /**
     * Sets the value of the moosesRemainingInTotalHuntingArea property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMoosesRemainingInTotalHuntingArea(Integer value) {
        this.moosesRemainingInTotalHuntingArea = value;
    }

    /**
     * Gets the value of the moosesRemainingInEffectiveHuntingArea property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMoosesRemainingInEffectiveHuntingArea() {
        return moosesRemainingInEffectiveHuntingArea;
    }

    /**
     * Sets the value of the moosesRemainingInEffectiveHuntingArea property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMoosesRemainingInEffectiveHuntingArea(Integer value) {
        this.moosesRemainingInEffectiveHuntingArea = value;
    }

    /**
     * Gets the value of the huntingAreaType property.
     * 
     * @return
     *     possible object is
     *     {@link MooseDataCardHarvestAreaType }
     *     
     */
    public MooseDataCardHarvestAreaType getHuntingAreaType() {
        return huntingAreaType;
    }

    /**
     * Sets the value of the huntingAreaType property.
     * 
     * @param value
     *     allowed object is
     *     {@link MooseDataCardHarvestAreaType }
     *     
     */
    public void setHuntingAreaType(MooseDataCardHarvestAreaType value) {
        this.huntingAreaType = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE2;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            Double theTotalHuntingArea;
            theTotalHuntingArea = this.getTotalHuntingArea();
            strategy.appendField(locator, this, "totalHuntingArea", buffer, theTotalHuntingArea, (this.totalHuntingArea!= null));
        }
        {
            Double theEffectiveHuntingArea;
            theEffectiveHuntingArea = this.getEffectiveHuntingArea();
            strategy.appendField(locator, this, "effectiveHuntingArea", buffer, theEffectiveHuntingArea, (this.effectiveHuntingArea!= null));
        }
        {
            Double theEffectiveHuntingAreaPercentage;
            theEffectiveHuntingAreaPercentage = this.getEffectiveHuntingAreaPercentage();
            strategy.appendField(locator, this, "effectiveHuntingAreaPercentage", buffer, theEffectiveHuntingAreaPercentage, (this.effectiveHuntingAreaPercentage!= null));
        }
        {
            Integer theMoosesRemainingInTotalHuntingArea;
            theMoosesRemainingInTotalHuntingArea = this.getMoosesRemainingInTotalHuntingArea();
            strategy.appendField(locator, this, "moosesRemainingInTotalHuntingArea", buffer, theMoosesRemainingInTotalHuntingArea, (this.moosesRemainingInTotalHuntingArea!= null));
        }
        {
            Integer theMoosesRemainingInEffectiveHuntingArea;
            theMoosesRemainingInEffectiveHuntingArea = this.getMoosesRemainingInEffectiveHuntingArea();
            strategy.appendField(locator, this, "moosesRemainingInEffectiveHuntingArea", buffer, theMoosesRemainingInEffectiveHuntingArea, (this.moosesRemainingInEffectiveHuntingArea!= null));
        }
        {
            MooseDataCardHarvestAreaType theHuntingAreaType;
            theHuntingAreaType = this.getHuntingAreaType();
            strategy.appendField(locator, this, "huntingAreaType", buffer, theHuntingAreaType, (this.huntingAreaType!= null));
        }
        return buffer;
    }

    public MooseDataCardSection_8_1 withTotalHuntingArea(Double value) {
        setTotalHuntingArea(value);
        return this;
    }

    public MooseDataCardSection_8_1 withEffectiveHuntingArea(Double value) {
        setEffectiveHuntingArea(value);
        return this;
    }

    public MooseDataCardSection_8_1 withEffectiveHuntingAreaPercentage(Double value) {
        setEffectiveHuntingAreaPercentage(value);
        return this;
    }

    public MooseDataCardSection_8_1 withMoosesRemainingInTotalHuntingArea(Integer value) {
        setMoosesRemainingInTotalHuntingArea(value);
        return this;
    }

    public MooseDataCardSection_8_1 withMoosesRemainingInEffectiveHuntingArea(Integer value) {
        setMoosesRemainingInEffectiveHuntingArea(value);
        return this;
    }

    public MooseDataCardSection_8_1 withHuntingAreaType(MooseDataCardHarvestAreaType value) {
        setHuntingAreaType(value);
        return this;
    }

    @Override
    public MooseDataCardSection_8_1 clone() {
        final MooseDataCardSection_8_1 _newObject;
        try {
            _newObject = ((MooseDataCardSection_8_1) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public MooseDataCardSection_8_1 createCopy() {
        final MooseDataCardSection_8_1 _newObject;
        try {
            _newObject = ((MooseDataCardSection_8_1) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.totalHuntingArea = this.totalHuntingArea;
        _newObject.effectiveHuntingArea = this.effectiveHuntingArea;
        _newObject.effectiveHuntingAreaPercentage = this.effectiveHuntingAreaPercentage;
        _newObject.moosesRemainingInTotalHuntingArea = this.moosesRemainingInTotalHuntingArea;
        _newObject.moosesRemainingInEffectiveHuntingArea = this.moosesRemainingInEffectiveHuntingArea;
        _newObject.huntingAreaType = this.huntingAreaType;
        return _newObject;
    }

    @Override
    public MooseDataCardSection_8_1 createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final MooseDataCardSection_8_1 _newObject;
        try {
            _newObject = ((MooseDataCardSection_8_1) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree totalHuntingAreaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("totalHuntingArea"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(totalHuntingAreaPropertyTree!= null):((totalHuntingAreaPropertyTree == null)||(!totalHuntingAreaPropertyTree.isLeaf())))) {
            _newObject.totalHuntingArea = this.totalHuntingArea;
        }
        final PropertyTree effectiveHuntingAreaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("effectiveHuntingArea"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(effectiveHuntingAreaPropertyTree!= null):((effectiveHuntingAreaPropertyTree == null)||(!effectiveHuntingAreaPropertyTree.isLeaf())))) {
            _newObject.effectiveHuntingArea = this.effectiveHuntingArea;
        }
        final PropertyTree effectiveHuntingAreaPercentagePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("effectiveHuntingAreaPercentage"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(effectiveHuntingAreaPercentagePropertyTree!= null):((effectiveHuntingAreaPercentagePropertyTree == null)||(!effectiveHuntingAreaPercentagePropertyTree.isLeaf())))) {
            _newObject.effectiveHuntingAreaPercentage = this.effectiveHuntingAreaPercentage;
        }
        final PropertyTree moosesRemainingInTotalHuntingAreaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("moosesRemainingInTotalHuntingArea"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(moosesRemainingInTotalHuntingAreaPropertyTree!= null):((moosesRemainingInTotalHuntingAreaPropertyTree == null)||(!moosesRemainingInTotalHuntingAreaPropertyTree.isLeaf())))) {
            _newObject.moosesRemainingInTotalHuntingArea = this.moosesRemainingInTotalHuntingArea;
        }
        final PropertyTree moosesRemainingInEffectiveHuntingAreaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("moosesRemainingInEffectiveHuntingArea"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(moosesRemainingInEffectiveHuntingAreaPropertyTree!= null):((moosesRemainingInEffectiveHuntingAreaPropertyTree == null)||(!moosesRemainingInEffectiveHuntingAreaPropertyTree.isLeaf())))) {
            _newObject.moosesRemainingInEffectiveHuntingArea = this.moosesRemainingInEffectiveHuntingArea;
        }
        final PropertyTree huntingAreaTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("huntingAreaType"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(huntingAreaTypePropertyTree!= null):((huntingAreaTypePropertyTree == null)||(!huntingAreaTypePropertyTree.isLeaf())))) {
            _newObject.huntingAreaType = this.huntingAreaType;
        }
        return _newObject;
    }

    @Override
    public MooseDataCardSection_8_1 copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public MooseDataCardSection_8_1 copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends MooseDataCardSection_8_1 .Selector<MooseDataCardSection_8_1 .Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static MooseDataCardSection_8_1 .Select _root() {
            return new MooseDataCardSection_8_1 .Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> totalHuntingArea = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> effectiveHuntingArea = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> effectiveHuntingAreaPercentage = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> moosesRemainingInTotalHuntingArea = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> moosesRemainingInEffectiveHuntingArea = null;
        private com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> huntingAreaType = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.totalHuntingArea!= null) {
                products.put("totalHuntingArea", this.totalHuntingArea.init());
            }
            if (this.effectiveHuntingArea!= null) {
                products.put("effectiveHuntingArea", this.effectiveHuntingArea.init());
            }
            if (this.effectiveHuntingAreaPercentage!= null) {
                products.put("effectiveHuntingAreaPercentage", this.effectiveHuntingAreaPercentage.init());
            }
            if (this.moosesRemainingInTotalHuntingArea!= null) {
                products.put("moosesRemainingInTotalHuntingArea", this.moosesRemainingInTotalHuntingArea.init());
            }
            if (this.moosesRemainingInEffectiveHuntingArea!= null) {
                products.put("moosesRemainingInEffectiveHuntingArea", this.moosesRemainingInEffectiveHuntingArea.init());
            }
            if (this.huntingAreaType!= null) {
                products.put("huntingAreaType", this.huntingAreaType.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> totalHuntingArea() {
            return ((this.totalHuntingArea == null)?this.totalHuntingArea = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>>(this._root, this, "totalHuntingArea"):this.totalHuntingArea);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> effectiveHuntingArea() {
            return ((this.effectiveHuntingArea == null)?this.effectiveHuntingArea = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>>(this._root, this, "effectiveHuntingArea"):this.effectiveHuntingArea);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> effectiveHuntingAreaPercentage() {
            return ((this.effectiveHuntingAreaPercentage == null)?this.effectiveHuntingAreaPercentage = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>>(this._root, this, "effectiveHuntingAreaPercentage"):this.effectiveHuntingAreaPercentage);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> moosesRemainingInTotalHuntingArea() {
            return ((this.moosesRemainingInTotalHuntingArea == null)?this.moosesRemainingInTotalHuntingArea = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>>(this._root, this, "moosesRemainingInTotalHuntingArea"):this.moosesRemainingInTotalHuntingArea);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> moosesRemainingInEffectiveHuntingArea() {
            return ((this.moosesRemainingInEffectiveHuntingArea == null)?this.moosesRemainingInEffectiveHuntingArea = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>>(this._root, this, "moosesRemainingInEffectiveHuntingArea"):this.moosesRemainingInEffectiveHuntingArea);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>> huntingAreaType() {
            return ((this.huntingAreaType == null)?this.huntingAreaType = new com.kscs.util.jaxb.Selector<TRoot, MooseDataCardSection_8_1 .Selector<TRoot, TParent>>(this._root, this, "huntingAreaType"):this.huntingAreaType);
        }

    }

}
