package fi.riista.feature.organization.rhy.annualstats.export;

import fi.riista.util.LocalisedEnum;

import javax.annotation.Nonnull;
import java.util.List;

import static fi.riista.feature.organization.rhy.annualstats.export.AnnualStatisticItem.*;
import static fi.riista.feature.organization.rhy.annualstats.export.AnnualStatisticsCategory.MISC;
import static fi.riista.feature.organization.rhy.annualstats.export.AnnualStatisticsCategory.NON_SUBSIDIZABLE_TRAININGS;
import static fi.riista.feature.organization.rhy.annualstats.export.AnnualStatisticsCategory.OVERVIEW;
import static fi.riista.feature.organization.rhy.annualstats.export.AnnualStatisticsCategory.PUBLIC_ADMINISTRATION_TASKS;
import static fi.riista.feature.organization.rhy.annualstats.export.AnnualStatisticsCategory.SRVA;
import static fi.riista.feature.organization.rhy.annualstats.export.AnnualStatisticsCategory.SUBSIDIZABLE_TRAININGS;
import static fi.riista.feature.organization.rhy.annualstats.export.AnnualStatisticsCategory.TRAININGS;
import static java.util.Arrays.asList;
import static java.util.Collections.unmodifiableList;
import static java.util.Objects.requireNonNull;

public enum AnnualStatisticGroup implements LocalisedEnum {

    BASIC_INFO(OVERVIEW, 1, asList(IBAN, OPERATIONAL_LAND_AREA_SIZE)),

    SUBSIDY_SUMMARY_2022(OVERVIEW, 1, asList(
            RHY_MEMBERS,
            SUBSIDIZABLE_HUNTER_EXAM_TRAINING_EVENTS,
            SUBSIDIZABLE_OTHER_TRAINING_EVENTS,
            SUBSIDIZABLE_STUDENT_AND_YOUTH_TRAINING_EVENTS,
            HUNTING_CONTROL_EVENTS_SUBSIDIZABLE,
            SUM_OF_LUKE_CALCULATIONS,
            TOTAL_LUKE_CARNIVORE_PERSONS,
            MOOSELIKE_TAXATION_PLANNING_EVENTS,
            WOLF_TERRITORY_WORKGROUPS,
            SRVA_ALL_MOOSELIKE_EVENTS,
            SMALL_GAME_LICENSES_SOLD_BY_METSAHALLITUS)),

    SUBSIDY_SUMMARY_2020(OVERVIEW, 1, asList(
            RHY_MEMBERS,
            SUBSIDIZABLE_HUNTER_EXAM_TRAINING_EVENTS,
            SUBSIDIZABLE_OTHER_TRAINING_EVENTS,
            SUBSIDIZABLE_STUDENT_AND_YOUTH_TRAINING_EVENTS,
            HUNTING_CONTROL_EVENTS,
            SUM_OF_LUKE_CALCULATIONS,
            TOTAL_LUKE_CARNIVORE_PERSONS,
            MOOSELIKE_TAXATION_PLANNING_EVENTS,
            WOLF_TERRITORY_WORKGROUPS,
            SRVA_ALL_MOOSELIKE_EVENTS,
            SMALL_GAME_LICENSES_SOLD_BY_METSAHALLITUS)),

    // Overridden by SUBSIDY_SUMMARY
    SUBSIDY_SUMMARY_2018(OVERVIEW, 1, asList(
            RHY_MEMBERS,
            SUBSIDIZABLE_HUNTER_EXAM_TRAINING_EVENTS,
            SUBSIDIZABLE_OTHER_TRAINING_EVENTS,
            SUBSIDIZABLE_STUDENT_AND_YOUTH_TRAINING_EVENTS,
            HUNTING_CONTROL_EVENTS,
            SUM_OF_LUKE_CALCULATIONS_2018,
            LUKE_CARNIVORE_CONTACT_PERSONS,
            MOOSELIKE_TAXATION_PLANNING_EVENTS,
            WOLF_TERRITORY_WORKGROUPS,
            SRVA_ALL_MOOSELIKE_EVENTS,
            SMALL_GAME_LICENSES_SOLD_BY_METSAHALLITUS)),

    // Overridden by SUBSIDY_SUMMARY
    MAIN_SUMMARY_2017(OVERVIEW, 1, asList(
            RHY_MEMBERS,
            HUNTER_EXAM_TRAINING_EVENTS,
            HUNTER_TRAINING_EVENTS_2017,
            STUDENT_TRAINING_EVENTS_2017,
            HUNTING_CONTROL_EVENTS,
            SUM_OF_LUKE_CALCULATIONS_2018,
            HARVEST_PERMIT_APPLICATION_PARTNERS,
            WOLF_TERRITORY_WORKGROUP_LEADS_2017,
            SRVA_ALL_EVENTS,
            SRVA_ALL_MOOSELIKE_EVENTS_2017,
            SRVA_ALL_LARGE_CARNIVORE_EVENTS_2017,
            SRVA_ALL_WILD_BOAR_EVENTS_2017,
            SMALL_GAME_LICENSES_SOLD_BY_METSAHALLITUS)),

    OTHER_SUMMARY_2022(OVERVIEW, 1, asList(
            HUNTER_EXAM_EVENTS,
            ALL_SHOOTING_TEST_EVENTS,
            HUNTING_CONTROL_EVENTS_TOTAL,
            GAME_DAMAGE_LOCATIONS_TOTAL,
            GRANTED_RECREATIONAL_SHOOTING_CERTIFICATES,
            MUTUAL_ACK_SHOOTING_CERTIFICATES)),

    OTHER_SUMMARY_2017(OVERVIEW, 1, asList(
            HUNTER_EXAM_EVENTS,
            ALL_SHOOTING_TEST_EVENTS,
            HUNTING_CONTROL_EVENTS,
            GAME_DAMAGE_LOCATIONS_TOTAL,
            GRANTED_RECREATIONAL_SHOOTING_CERTIFICATES,
            MUTUAL_ACK_SHOOTING_CERTIFICATES)),

    HUNTER_EXAMS(PUBLIC_ADMINISTRATION_TASKS, 2, asList(
            HUNTER_EXAM_EVENTS,
            ALL_HUNTER_EXAM_ATTEMPTS,
            PASSED_HUNTER_EXAM_ATTEMPTS,
            FAILED_HUNTER_EXAM_ATTEMPTS,
            ASSIGNED_HUNTER_EXAM_OFFICIALS)),

    SHOOTING_TESTS(PUBLIC_ADMINISTRATION_TASKS, 2, asList(
            ALL_SHOOTING_TEST_EVENTS,
            FIREARM_TEST_EVENTS,
            BOW_TEST_EVENTS,
            ALL_SHOOTING_TEST_ATTEMPTS,
            ALL_ROE_DEER_ATTEMPTS,
            QUALIFIED_ROE_DEER_ATTEMPTS,
            ALL_MOOSE_ATTEMPTS,
            QUALIFIED_MOOSE_ATTEMPTS,
            ALL_BEAR_ATTEMPTS,
            QUALIFIED_BEAR_ATTEMPTS,
            ALL_BOW_ATTEMPTS,
            QUALIFIED_BOW_ATTEMPTS,
            SHOOTING_TEST_OFFICIALS)),

    GAME_DAMAGE(PUBLIC_ADMINISTRATION_TASKS, 2, asList(
            GAME_DAMAGE_LOCATIONS_MOOSELIKE,
            GAME_DAMAGE_LOCATIONS_LARGE_CARNIVORE,
            GAME_DAMAGE_LOCATIONS_TOTAL,
            GAME_DAMAGE_INSPECTORS)),

    HUNTING_CONTROL(PUBLIC_ADMINISTRATION_TASKS, 2, asList(
            HUNTING_CONTROL_EVENTS_TOTAL,
            HUNTING_CONTROL_EVENTS_SUBSIDIZABLE,
            HUNTING_CONTROL_EVENTS_NONSUBSIDIZABLE,
            HUNTING_CONTROL_CUSTOMERS,
            HUNTING_CONTROL_PROOF_ORDERS,
            HUNTING_CONTROLLERS)),

    HUNTING_CONTROL_2017(PUBLIC_ADMINISTRATION_TASKS, 2, asList(
            HUNTING_CONTROL_EVENTS,
            HUNTING_CONTROL_CUSTOMERS,
            HUNTING_CONTROL_PROOF_ORDERS,
            HUNTING_CONTROLLERS)),

    OTHER_PUBLIC_ADMIN_TASKS(PUBLIC_ADMINISTRATION_TASKS, 2, asList(
            GRANTED_RECREATIONAL_SHOOTING_CERTIFICATES,
            MUTUAL_ACK_SHOOTING_CERTIFICATES)),

    SRVA_TOTALS(SRVA, 3, asList(SRVA_ALL_EVENTS, SRVA_TOTAL_WORK_HOURS, SRVA_TOTAL_PARTICIPANTS)),

    SRVA_ACCIDENTS(SRVA, 3, asList(
            SRVA_ALL_ACCIDENTS,
            SRVA_TRAFFIC_ACCIDENTS,
            SRVA_RAILWAY_ACCIDENTS,
            SRVA_OTHER_ACCIDENTS,
            SRVA_ACCIDENTS_MOOSE,
            SRVA_ACCIDENTS_WHITE_TAILED_DEER,
            SRVA_ACCIDENTS_ROE_DEER,
            SRVA_ACCIDENTS_WILD_FOREST_REINDEER,
            SRVA_ACCIDENTS_FALLOW_DEER,
            SRVA_ACCIDENTS_WILD_BOAR,
            SRVA_ACCIDENTS_LYNX,
            SRVA_ACCIDENTS_BEAR,
            SRVA_ACCIDENTS_WOLF,
            SRVA_ACCIDENTS_WOLVERINE,
            SRVA_ACCIDENTS_OTHER_SPECIES)),

    SRVA_DEPORTATIONS(SRVA, 3, asList(
            SRVA_ALL_DEPORTATIONS,
            SRVA_DEPORTATIONS_MOOSE,
            SRVA_DEPORTATIONS_WHITE_TAILED_DEER,
            SRVA_DEPORTATIONS_ROE_DEER,
            SRVA_DEPORTATIONS_WILD_FOREST_REINDEER,
            SRVA_DEPORTATIONS_FALLOW_DEER,
            SRVA_DEPORTATIONS_WILD_BOAR,
            SRVA_DEPORTATIONS_LYNX,
            SRVA_DEPORTATIONS_BEAR,
            SRVA_DEPORTATIONS_WOLF,
            SRVA_DEPORTATIONS_WOLVERINE,
            SRVA_DEPORTATIONS_OTHER_SPECIES)),

    SRVA_INJURIES(SRVA, 3, asList(
            SRVA_ALL_INJURIES,
            SRVA_INJURIES_MOOSE,
            SRVA_INJURIES_WHITE_TAILED_DEER,
            SRVA_INJURIES_ROE_DEER,
            SRVA_INJURIES_WILD_FOREST_REINDEER,
            SRVA_INJURIES_FALLOW_DEER,
            SRVA_INJURIES_WILD_BOAR,
            SRVA_INJURIES_LYNX,
            SRVA_INJURIES_BEAR,
            SRVA_INJURIES_WOLF,
            SRVA_INJURIES_WOLVERINE,
            SRVA_INJURIES_OTHER_SPECIES)),

    TRAINING_SUMMARY(SUBSIDIZABLE_TRAININGS, 4, asList(SUBSIDIZABLE_TRAINING_EVENTS, SUBSIDIZABLE_TRAINING_PARTICIPANTS)),

    // Overridden by TRAINING_SUMMARY
    TRAINING_SUMMARY_2017(SUBSIDIZABLE_TRAININGS, 4, asList(ALL_TRAINING_EVENTS_2017, ALL_TRAINING_PARTICIPANTS_2017)),

    HUNTER_EXAM_TRAINING(SUBSIDIZABLE_TRAININGS, 4, asList(HUNTER_EXAM_TRAINING_EVENTS, HUNTER_EXAM_TRAINING_PARTICIPANTS)),

    JHT_TRAINING(SUBSIDIZABLE_TRAININGS, 4, asList(
            SHOOTING_TEST_TRAINING_EVENTS,
            SHOOTING_TEST_TRAINING_PARTICIPANTS,
            HUNTER_EXAM_OFFICIAL_TRAINING_EVENTS,
            HUNTER_EXAM_OFFICIAL_TRAINING_PARTICIPANTS,
            GAME_DAMAGE_TRAINING_EVENTS,
            GAME_DAMAGE_TRAINING_PARTICIPANTS,
            HUNTING_CONTROL_TRAINING_EVENTS,
            HUNTING_CONTROL_TRAINING_PARTICIPANTS)),


    HUNTER_TRAINING(SUBSIDIZABLE_TRAININGS, 4, asList(
            MOOSELIKE_HUNTING_LEADER_TRAINING_EVENTS,
            MOOSELIKE_HUNTING_LEADER_TRAINING_PARTICIPANTS,
            CARNIVORE_HUNTING_LEADER_TRAINING_EVENTS,
            CARNIVORE_HUNTING_LEADER_TRAINING_PARTICIPANTS,
            MOOSELIKE_HUNTING_TRAINING_EVENTS,
            MOOSELIKE_HUNTING_TRAINING_PARTICIPANTS,
            CARNIVORE_HUNTING_TRAINING_EVENTS,
            CARNIVORE_HUNTING_TRAINING_PARTICIPANTS,
            SRVA_TRAINING_EVENTS,
            SRVA_TRAINING_PARTICIPANTS,
            CARNIVORE_CONTACT_PERSON_TRAINING_EVENTS,
            CARNIVORE_CONTACT_PERSON_TRAINING_PARTICIPANTS,
            ACCIDENT_PREVENTION_TRAINING_EVENTS,
            ACCIDENT_PREVENTION_TRAINING_PARTICIPANTS)),


    HUNTER_TRAINING_2017(TRAININGS, 4, asList(
            MOOSELIKE_HUNTING_LEADER_TRAINING_EVENTS,
            MOOSELIKE_HUNTING_LEADER_TRAINING_PARTICIPANTS,
            CARNIVORE_HUNTING_LEADER_TRAINING_EVENTS,
            CARNIVORE_HUNTING_LEADER_TRAINING_PARTICIPANTS,
            MOOSELIKE_HUNTING_TRAINING_EVENTS,
            MOOSELIKE_HUNTING_TRAINING_PARTICIPANTS,
            CARNIVORE_HUNTING_TRAINING_EVENTS,
            CARNIVORE_HUNTING_TRAINING_PARTICIPANTS,
            SRVA_TRAINING_EVENTS,
            SRVA_TRAINING_PARTICIPANTS,
            CARNIVORE_CONTACT_PERSON_TRAINING_EVENTS,
            CARNIVORE_CONTACT_PERSON_TRAINING_PARTICIPANTS,
            ACCIDENT_PREVENTION_TRAINING_EVENTS,
            ACCIDENT_PREVENTION_TRAINING_PARTICIPANTS,
            SCHOOL_TRAINING_EVENTS,
            SCHOOL_TRAINING_PARTICIPANTS,
            COLLEGE_TRAINING_EVENTS,
            COLLEGE_TRAINING_PARTICIPANTS,
            OTHER_YOUTH_TARGETED_TRAINING_EVENTS,
            OTHER_YOUTH_TARGETED_TRAINING_PARTICIPANTS)),


    YOUTH_TRAINING(SUBSIDIZABLE_TRAININGS, 4, asList(
            SCHOOL_TRAINING_EVENTS,
            SCHOOL_TRAINING_PARTICIPANTS,
            COLLEGE_TRAINING_EVENTS,
            COLLEGE_TRAINING_PARTICIPANTS,
            OTHER_YOUTH_TARGETED_TRAINING_EVENTS,
            OTHER_YOUTH_TARGETED_TRAINING_PARTICIPANTS)),


    OTHER_HUNTER_TRAINING(SUBSIDIZABLE_TRAININGS, 5, asList(
            SMALL_CARNIVORE_HUNTING_TRAINING_EVENTS,
            SMALL_CARNIVORE_HUNTING_TRAINING_PARTICIPANTS,
            GAME_COUNTING_TRAINING_EVENTS,
            GAME_COUNTING_TRAINING_PARTICIPANTS,
            GAME_POPULATION_MANAGEMENT_TRAINING_EVENTS,
            GAME_POPULATION_MANAGEMENT_TRAINING_PARTICIPANTS,
            GAME_ENVIRONMENTAL_CARE_TRAINING_EVENTS,
            GAME_ENVIRONMENTAL_CARE_TRAINING_PARTICIPANTS,
            OTHER_GAMEKEEPING_TRAINING_EVENTS,
            OTHER_GAMEKEEPING_TRAINING_PARTICIPANTS,
            SHOOTING_TRAINING_EVENTS,
            SHOOTING_TRAINING_PARTICIPANTS,
            TRACKER_TRAINING_EVENTS,
            TRACKER_TRAINING_PARTICIPANTS)),

    NON_SUBSIDIZABLE_TRAINING_SUMMARY(NON_SUBSIDIZABLE_TRAININGS, 6, asList(NON_SUBSIDIZABLE_TRAINING_EVENTS, NON_SUBSIDIZABLE_TRAINING_PARTICIPANTS)),
    NON_SUBSIDIZABLE_HUNTER_EXAM_TRAINING(NON_SUBSIDIZABLE_TRAININGS, 6, asList(NON_SUBSIDIZABLE_HUNTER_EXAM_TRAINING_EVENTS, NON_SUBSIDIZABLE_HUNTER_EXAM_TRAINING_PARTICIPANTS)),
    NON_SUBSIDIZABLE_JHT_TRAINING(NON_SUBSIDIZABLE_TRAININGS, 6, asList(
            NON_SUBSIDIZABLE_SHOOTING_TEST_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_SHOOTING_TEST_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_HUNTER_EXAM_OFFICIAL_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_HUNTER_EXAM_OFFICIAL_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_GAME_DAMAGE_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_GAME_DAMAGE_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_HUNTING_CONTROL_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_HUNTING_CONTROL_TRAINING_PARTICIPANTS)),
    NON_SUBSIDIZABLE_HUNTER_TRAINING(NON_SUBSIDIZABLE_TRAININGS, 6, asList(
            NON_SUBSIDIZABLE_MOOSELIKE_HUNTING_LEADER_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_MOOSELIKE_HUNTING_LEADER_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_CARNIVORE_HUNTING_LEADER_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_CARNIVORE_HUNTING_LEADER_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_MOOSELIKE_HUNTING_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_MOOSELIKE_HUNTING_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_CARNIVORE_HUNTING_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_CARNIVORE_HUNTING_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_SRVA_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_SRVA_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_CARNIVORE_CONTACT_PERSON_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_CARNIVORE_CONTACT_PERSON_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_ACCIDENT_PREVENTION_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_ACCIDENT_PREVENTION_TRAINING_PARTICIPANTS)),
    NON_SUBSIDIZABLE_YOUTH_TRAINING(NON_SUBSIDIZABLE_TRAININGS, 6, asList(
            NON_SUBSIDIZABLE_SCHOOL_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_SCHOOL_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_COLLEGE_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_COLLEGE_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_OTHER_YOUTH_TARGETED_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_OTHER_YOUTH_TARGETED_TRAINING_PARTICIPANTS)),
    NON_SUBSIDIZABLE_OTHER_HUNTER_TRAINING(NON_SUBSIDIZABLE_TRAININGS, 7, asList(
            NON_SUBSIDIZABLE_SMALL_CARNIVORE_HUNTING_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_SMALL_CARNIVORE_HUNTING_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_GAME_COUNTING_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_GAME_COUNTING_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_GAME_POPULATION_MANAGEMENT_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_GAME_POPULATION_MANAGEMENT_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_GAME_ENVIRONMENTAL_CARE_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_GAME_ENVIRONMENTAL_CARE_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_OTHER_GAMEKEEPING_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_OTHER_GAMEKEEPING_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_SHOOTING_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_SHOOTING_TRAINING_PARTICIPANTS,
            NON_SUBSIDIZABLE_TRACKER_TRAINING_EVENTS,
            NON_SUBSIDIZABLE_TRACKER_TRAINING_PARTICIPANTS)),

    // Overridden by OTHER_HUNTER_TRAINING
    OTHER_HUNTER_TRAINING_2017(TRAININGS, 5, asList(
            SMALL_CARNIVORE_HUNTING_TRAINING_EVENTS,
            SMALL_CARNIVORE_HUNTING_TRAINING_PARTICIPANTS,
            GAME_COUNTING_TRAINING_EVENTS,
            GAME_COUNTING_TRAINING_PARTICIPANTS,
            GAME_POPULATION_MANAGEMENT_TRAINING_EVENTS,
            GAME_POPULATION_MANAGEMENT_TRAINING_PARTICIPANTS,
            GAME_ENVIRONMENTAL_CARE_TRAINING_EVENTS,
            GAME_ENVIRONMENTAL_CARE_TRAINING_PARTICIPANTS,
            OTHER_GAMEKEEPING_TRAINING_EVENTS,
            OTHER_GAMEKEEPING_TRAINING_PARTICIPANTS,
            OTHER_SHOOTING_TRAINING_EVENTS_2017,
            OTHER_SHOOTING_TRAINING_PARTICIPANTS_2017,
            TRACKER_TRAINING_EVENTS,
            TRACKER_TRAINING_PARTICIPANTS)),

    // Overridden by public events
    PUBLIC_EVENTS_2018(TRAININGS, 5, asList(AnnualStatisticItem.PUBLIC_EVENTS_2018, PUBLIC_EVENT_PARTICIPANTS_2018)),

    // Overridden by PUBLIC_EVENTS
    OTHER_TRAINING_2017(TRAININGS, 5, asList(OTHER_TRAINING_EVENTS_2017, OTHER_TRAINING_PARTICIPANTS_2017)),

    OTHER_HUNTING_RELATED(MISC, 8, asList(
            HARVEST_PERMIT_APPLICATION_PARTNERS,
            MOOSELIKE_TAXATION_PLANNING_EVENTS,
            WOLF_TERRITORY_WORKGROUPS)),

    // Overridden by OTHER_HUNTING_RELATED
    OTHER_HUNTING_RELATED_2017(MISC, 6, asList(
            HARVEST_PERMIT_APPLICATION_PARTNERS,
            WOLF_TERRITORY_WORKGROUP_LEADS_2017)),

    COMMUNICATION(MISC, 8, asList(INTERVIEWS, ANNOUNCEMENTS, OMARIISTA_ANNOUNCEMENTS, WWW, SOME_CHANNELS)),

    SHOOTING_RANGES(MISC, 8, asList(MOOSE_RANGES, SHOTGUN_RANGES, RIFLE_RANGES, OTHER_SHOOTING_RANGES)),

    LUKE(MISC, 8, asList(
            TOTAL_GAME_TRIANGLES,
            WINTER_GAME_TRIANGLES,
            SUMMER_GAME_TRIANGLES,
            FIELD_TRIANGLES,
            TOTAL_WATER_BIRD_CALCULATION_LOCATIONS,
            WATER_BIRD_BROOD_CALCULATION_LOCATIONS,
            WATER_BIRD_COUPLE_CALCULATION_LOCATIONS,
            NORTHERN_LAPLAND_WILLOW_GROUSE_LINES,
            TOTAL_LUKE_CARNIVORE_PERSONS,
            LUKE_CARNIVORE_CONTACT_PERSONS,
            LUKE_CARNIVORE_DNA_COLLECTORS)),

    // Overridden by LUKE
    LUKE_2018(MISC, 6, asList(
            TOTAL_GAME_TRIANGLES,
            WINTER_GAME_TRIANGLES,
            SUMMER_GAME_TRIANGLES,
            FIELD_TRIANGLES,
            TOTAL_WATER_BIRD_CALCULATION_LOCATIONS,
            WATER_BIRD_BROOD_CALCULATION_LOCATIONS,
            WATER_BIRD_COUPLE_CALCULATION_LOCATIONS,
            LUKE_CARNIVORE_CONTACT_PERSONS)),

    // Overridden by LUKE
    LUKE_2017(MISC, 6, asList(
            TOTAL_GAME_TRIANGLES,
            WINTER_GAME_TRIANGLES,
            SUMMER_GAME_TRIANGLES,
            FIELD_TRIANGLES,
            WATER_BIRD_CALCULATION_LOCATIONS_2017)),

    METSAHALLITUS(MISC, 8, asList(SMALL_GAME_LICENSES_SOLD_BY_METSAHALLITUS)),

    PUBLIC_EVENTS(MISC, 8, asList(AnnualStatisticItem.PUBLIC_EVENTS, PUBLIC_EVENT_PARTICIPANTS));

    private final AnnualStatisticsCategory category;
    private final int printoutPageNumber;
    private final List<AnnualStatisticItem> items;

    AnnualStatisticGroup(@Nonnull final AnnualStatisticsCategory category,
                         final int pageNumber,
                         @Nonnull final List<AnnualStatisticItem> items) {

        this.category = requireNonNull(category);
        this.printoutPageNumber = pageNumber;
        this.items = unmodifiableList(requireNonNull(items));
    }

    public AnnualStatisticsCategory getCategory() {
        return category;
    }

    public int getPrintoutPageNumber() {
        return printoutPageNumber;
    }

    public List<AnnualStatisticItem> getItems() {
        return items;
    }
}
