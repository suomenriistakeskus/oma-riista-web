package fi.riista.feature.permit.invoice;

import fi.riista.feature.common.entity.BicConverter;
import fi.riista.feature.common.entity.CreditorReference;
import fi.riista.feature.common.entity.IbanConverter;
import fi.riista.feature.common.entity.LifecycleEntity;
import fi.riista.feature.organization.address.Address;
import fi.riista.feature.permit.invoice.search.InvoiceDeliveryType;
import fi.riista.feature.permit.invoice.search.InvoiceDisplayState;
import fi.riista.feature.storage.metadata.PersistentFileMetadata;
import fi.riista.validation.XssSafe;
import org.hibernate.validator.constraints.NotBlank;
import org.iban4j.Bic;
import org.iban4j.Iban;
import org.joda.time.LocalDate;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Transient;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.math.BigDecimal;
import java.util.EnumSet;

import static fi.riista.feature.permit.invoice.InvoiceState.DELIVERED;
import static fi.riista.feature.permit.invoice.InvoiceState.PAID;
import static fi.riista.feature.permit.invoice.InvoiceState.REMINDER;
import static fi.riista.util.DateUtil.today;

// Common data for all invoices
@Entity
@Access(value = AccessType.FIELD)
public class Invoice extends LifecycleEntity<Long> {

    public static final String ID_COLUMN_NAME = "invoice_id";

    private Long id;

    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(nullable = false, updatable = false)
    private InvoiceType type;

    // Must meet Fivaldi constraints (max 8 digits and must not collide with existing Fivaldi invoice numbers)
    @NotNull
    @Column(nullable = false)
    private Integer invoiceNumber;

    @NotNull
    @Convert(converter = BicConverter.class)
    @Column(length = 11, nullable = false)
    private Bic bic;

    @NotNull
    @Column(length = 18, nullable = false)
    @Convert(converter = IbanConverter.class)
    private Iban iban;

    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private InvoiceState state;

    @NotNull
    @Column(nullable = false)
    private LocalDate invoiceDate;

    @NotNull
    @Column(nullable = false)
    private LocalDate dueDate;

    @Column
    private LocalDate paymentDate;

    @NotNull
    @Column(nullable = false)
    private BigDecimal amount;

    @NotNull
    @Valid
    @Embedded
    private CreditorReference creditorReference;

    // Recipient's name at the time invoice was created.
    @NotBlank
    @Size(max = 255)
    @Column(nullable = false)
    private String recipientName;

    // Recipient's address at the time invoice was created.
    @NotNull
    @OneToOne(optional = false, fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
    @JoinColumn(unique = true, nullable = false)
    private Address recipientAddress;

    @Column(nullable = false, updatable = false)
    private boolean originalDeliveryByEmail;

    @Column(nullable = false)
    private boolean electronicInvoicingEnabled;

    // Unique id for payment.
    @XssSafe
    @Size(max = 255)
    @Column
    private String paytrailPaymentId;

    // This is the same reference number that was sent to the Payment Gateway or the reference number generated by Paytrail.
    @XssSafe
    @Size(max = 255)
    @Column
    private String paytrailSettlementReferenceNumber;

    @NotNull
    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "file_metadata_id", unique = true, nullable = false)
    private PersistentFileMetadata pdfFileMetadata;

    Invoice() {
        // For Hibernate
    }

    public Invoice(final boolean electronicInvoicingEnabled) {
        this.electronicInvoicingEnabled = electronicInvoicingEnabled;
        this.originalDeliveryByEmail = electronicInvoicingEnabled;
    }

    @Transient
    public void assertStateTransition(final EnumSet<InvoiceState> allowedFromStates, final InvoiceState toState) {
        if (!allowedFromStates.contains(this.state)) {
            throw new IllegalStateException(String.format(
                    "Illegal state transition from %s to %s for invoice id=%d",
                    this.state.name(), toState.name(), this.id));
        }
    }

    @Transient
    public void setStateReminder() {
        assertStateTransition(EnumSet.of(DELIVERED, REMINDER), REMINDER);

        if (electronicInvoicingEnabled) {
            throw new IllegalStateException(String.format(
                    "Cannot transition invoice state to %s when electronic invoicing is enabled for invoice id=%d",
                    REMINDER.name(), this.id));
        }

        this.state = InvoiceState.REMINDER;
    }

    public void disableElectronicInvoicing() {
        if (state == PAID) {
            throw new IllegalStateException("Cannot disable electronic invoicing for paid invoice id=" + id);
        }
        if (!electronicInvoicingEnabled) {
            throw new IllegalStateException("Electronic invoicing is already disabled for invoice id=" + id);
        }
        this.electronicInvoicingEnabled = false;
    }

    @Transient
    public InvoiceDisplayState getDisplayState() {
        switch (state) {
            case CREATED:
                return InvoiceDisplayState.CREATED;
            case DELIVERED:
                return today().isAfter(dueDate) ? InvoiceDisplayState.OVERDUE : InvoiceDisplayState.DELIVERED;
            case PAID:
                return InvoiceDisplayState.PAID;
            case REMINDER:
                return InvoiceDisplayState.REMINDER;
            case VOID:
                return InvoiceDisplayState.VOID;
            case UNKNOWN:
            default:
                return InvoiceDisplayState.UNKNOWN;
        }
    }

    @Transient
    public InvoiceDeliveryType getDeliveryType() {
        return electronicInvoicingEnabled ? InvoiceDeliveryType.EMAIL : InvoiceDeliveryType.LETTER;
    }

    @Transient
    public boolean isOverdue() {
        return EnumSet.of(DELIVERED, REMINDER).contains(state) && today().isAfter(dueDate);
    }

    // Accessors -->

    @Override
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Access(value = AccessType.PROPERTY)
    @Column(name = ID_COLUMN_NAME, nullable = false)
    public Long getId() {
        return id;
    }

    @Override
    public void setId(final Long id) {
        this.id = id;
    }

    public InvoiceType getType() {
        return type;
    }

    public void setType(final InvoiceType type) {
        this.type = type;
    }

    public Integer getInvoiceNumber() {
        return invoiceNumber;
    }

    public void setInvoiceNumber(final Integer invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
    }

    public Bic getBic() {
        return bic;
    }

    public void setBic(final Bic bic) {
        this.bic = bic;
    }

    public Iban getIban() {
        return iban;
    }

    public void setIban(final Iban iban) {
        this.iban = iban;
    }

    public InvoiceState getState() {
        return state;
    }

    public void setState(final InvoiceState state) {
        this.state = state;
    }

    public LocalDate getInvoiceDate() {
        return invoiceDate;
    }

    public void setInvoiceDate(final LocalDate invoiceDate) {
        this.invoiceDate = invoiceDate;
    }

    public LocalDate getDueDate() {
        return dueDate;
    }

    public void setDueDate(final LocalDate dueDate) {
        this.dueDate = dueDate;
    }

    public LocalDate getPaymentDate() {
        return paymentDate;
    }

    public void setPaymentDate(final LocalDate paymentDate) {
        this.paymentDate = paymentDate;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(final BigDecimal amount) {
        this.amount = amount;
    }

    public CreditorReference getCreditorReference() {
        return creditorReference;
    }

    public void setCreditorReference(final CreditorReference creditorReference) {
        this.creditorReference = creditorReference;
    }

    public String getRecipientName() {
        return recipientName;
    }

    public void setRecipientName(final String recipientName) {
        this.recipientName = recipientName;
    }

    public Address getRecipientAddress() {
        return recipientAddress;
    }

    public void setRecipientAddress(final Address recipientAddress) {
        this.recipientAddress = recipientAddress;
    }

    public boolean isElectronicInvoicingEnabled() {
        return electronicInvoicingEnabled;
    }

    public boolean isOriginalDeliveryByEmail() {
        return originalDeliveryByEmail;
    }

    public String getPaytrailPaymentId() {
        return paytrailPaymentId;
    }

    public void setPaytrailPaymentId(final String paytrailPaymentId) {
        this.paytrailPaymentId = paytrailPaymentId;
    }

    public String getPaytrailSettlementReferenceNumber() {
        return paytrailSettlementReferenceNumber;
    }

    public void setPaytrailSettlementReferenceNumber(final String paytrailSettlementReferenceNumber) {
        this.paytrailSettlementReferenceNumber = paytrailSettlementReferenceNumber;
    }

    public PersistentFileMetadata getPdfFileMetadata() {
        return pdfFileMetadata;
    }

    public void setPdfFileMetadata(final PersistentFileMetadata pdfFileMetadata) {
        this.pdfFileMetadata = pdfFileMetadata;
    }
}
